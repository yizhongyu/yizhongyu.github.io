<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用docker搭建halo博客</title>
      <link href="/2022/08/31/halo_docker/"/>
      <url>/2022/08/31/halo_docker/</url>
      
        <content type="html"><![CDATA[<p>Halo [ˈheɪloʊ]，一款现代化的开源博客&#x2F;CMS系统，值得一试。</p><h3 id="云服务器启动后安装docker套件"><a href="#云服务器启动后安装docker套件" class="headerlink" title="云服务器启动后安装docker套件"></a>云服务器启动后安装docker套件</h3><h4 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h4><p>安装软件包（提供实用程序）并设置存储库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo yum install -y yum-utilssudo yum-config-manager \  --add-repo \  https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><p>安装<em>最新版本</em>的 Docker 引擎、容器和 Docker Compose。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动 Docker。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过运行映像来验证 Docker 引擎是否已正确安装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="将-Docker-配置为开机自启"><a href="#将-Docker-配置为开机自启" class="headerlink" title="将 Docker 配置为开机自启"></a>将 Docker 配置为开机自启</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo systemctl enable docker.servicesudo systemctl enable containerd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker compose"></a>安装docker compose</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo curl -L https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.10.2&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composesudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者使用GitHub地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;Latest&#x2F;docker-compose-linux-x86_64-$(uname -s)-$(uname -m) -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composesudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="利用docker-compose安装halo套件"><a href="#利用docker-compose安装halo套件" class="headerlink" title="利用docker-compose安装halo套件"></a>利用docker-compose安装halo套件</h3><h4 id="创建容器组"><a href="#创建容器组" class="headerlink" title="创建容器组"></a>创建容器组</h4><p>在系统任意位置创建一个文件夹，此文档以 <code>~/halo-app</code> 为例。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir ~&#x2F;halo-app &amp;&amp; cd ~&#x2F;halo-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim docker-compose.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅创建 Halo 实例（使用默认的 H2 数据库）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: &quot;3&quot;services:  halo:    image: halohub&#x2F;halo:1.5.4    container_name: halo    restart: on-failure:3    volumes:      - .&#x2F;:&#x2F;root&#x2F;.halo      - &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro    ports:      - &quot;8090:8090&quot;    environment:      - SERVER_PORT&#x3D;8090      - SPRING_DATASOURCE_DRIVER_CLASS_NAME&#x3D;org.h2.Driver      - SPRING_DATASOURCE_URL&#x3D;jdbc:h2:file:~&#x2F;.halo&#x2F;db&#x2F;halo      - SPRING_DATASOURCE_USERNAME&#x3D;admin      - SPRING_DATASOURCE_PASSWORD&#x3D;o#DwN&amp;JSa56      - HALO_ADMIN_PATH&#x3D;admin      - HALO_CACHE&#x3D;memory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建 Halo + MySQL + Redis 的实例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: &quot;3&quot;services:  halo_server:    image: halohub&#x2F;halo:1.5.4    container_name: halo_server    restart: on-failure:3    depends_on:      - halo_mysql      - halo_redis    networks:      halo_network:    volumes:      - .&#x2F;:&#x2F;root&#x2F;.halo      - &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro    ports:      - &quot;8090:8090&quot;    environment:      - SERVER_PORT&#x3D;8090      - SPRING_DATASOURCE_DRIVER_CLASS_NAME&#x3D;com.mysql.cj.jdbc.Driver      - SPRING_DATASOURCE_URL&#x3D;jdbc:mysql:&#x2F;&#x2F;halo_mysql:3306&#x2F;halodb?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&amp;allowPublicKeyRetrieval&#x3D;true      - SPRING_DATASOURCE_USERNAME&#x3D;root      - SPRING_DATASOURCE_PASSWORD&#x3D;o#DwN&amp;JSa56      - HALO_ADMIN_PATH&#x3D;admin      - HALO_CACHE&#x3D;redis      - SPRING_REDIS_PORT&#x3D;6379      - SPRING_REDIS_DATABASE&#x3D;0      - SPRING_REDIS_HOST&#x3D;halo_redis      - SPRING_REDIS_PASSWORD&#x3D;dm5fD%rvPtq  halo_mysql:    image: mysql:8.0.27    container_name: halo_mysql    restart: on-failure:3    networks:      halo_network:    command: --default-authentication-plugin&#x3D;mysql_native_password      --character-set-server&#x3D;utf8mb4      --collation-server&#x3D;utf8mb4_general_ci      --explicit_defaults_for_timestamp&#x3D;true    volumes:      - &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro      - .&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql      - .&#x2F;mysqlBackup:&#x2F;data&#x2F;mysqlBackup    ports:      - &quot;3306:3306&quot;    environment:      # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_DATASOURCE_PASSWORD 变量值      - MYSQL_ROOT_PASSWORD&#x3D;o#DwN&amp;JSa56      - MYSQL_DATABASE&#x3D;halodb  halo_redis:    image: redis    container_name: halo_redis    restart: on-failure:3    networks:      halo_network:    volumes:      - .&#x2F;redis&#x2F;data:&#x2F;data      - .&#x2F;redis&#x2F;logs:&#x2F;logs    # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_REDIS_PASSWORD 变量值    command: redis-server --requirepass dm5fD%rvPtq    ports:      - &quot;6379:6379&quot;networks:  halo_network:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动 Halo 服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开 <code>http://ip:端口号</code> 即可看到安装引导界面。</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>Nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum install nginx#安装systemctl enable nginx#开机自启systemctl start nginx#启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>vim /etc/nginx/nginx.conf</code>编辑配置文件，将80端口给halo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">upstream halo &#123;  server 127.0.0.1:8090;&#125;server &#123;  listen 80;  listen [::]:80;  server_name www.yourdomain.com;  client_max_body_size 1024m;  location &#x2F; &#123;    proxy_pass http:&#x2F;&#x2F;halo;    proxy_set_header HOST $host;    proxy_set_header X-Forwarded-Proto $scheme;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx -s reload#重新加载Nginxsystemctl restart nginx #或者重启Nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> halo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装摘要</title>
      <link href="/2022/08/24/centos7_System_installation/"/>
      <url>/2022/08/24/centos7_System_installation/</url>
      
        <content type="html"><![CDATA[<p>CentOS 7 的支持周期到 2024-06-30</p><p><a href="https://wiki.centos.org/Download">官网下载</a></p><h4 id="引导安装"><a href="#引导安装" class="headerlink" title="引导安装"></a>引导安装</h4><p><strong>语言选择</strong>：尽量选择 English，English (United States)</p><p>先配置网络</p><p><strong>Network &amp; Hostname</strong>：Host name:XXXX，点击Apply按钮</p><p>点击 OFF 按钮为 ON，点击 Configure… 按钮，General 页面注意勾选 “Automatically connect to this network when it is available”，</p><p>IPv4 Settings页面，Method:Manual，点击Add按钮，根据需要输入 IP 地址和 DNS，点击Save按钮</p><p><strong>Keyboard</strong>：默认 English (US)。</p><p><strong>Language Support</strong>：下拉到最下面 “中文”，勾选 “简体中文” 和 “繁体中文”。</p><p><strong>Time &amp; Date</strong>：点选 Asia&#x2F;Shanghai，Network Time 自动 ON（前面先配置了网络）。</p><p><strong>Installation Source</strong>：如果是 Minimal 或者 DVD 介质，默认是 Local media。</p><p><strong>Software Selection</strong>：Virtualization Host，勾选 “Development Tools”与Network File System Client，虚机勾选 “Guest Agent”。</p><p><strong>Installation Destination</strong>：创建分区，</p><p>默认分区方案：点选 Automatically configure partitioning，默认使用 LVM，点击 “Done” 自动创建。</p><p>手动分区方案：点选 I will configure partitioning，点击 “Done”手动调整分区。</p><p><strong>KDUMP</strong>：默认启用。</p><p><strong>Security Policy</strong>：暂无，忽略。</p><p>点击Begin Installation按钮开始安装</p><p>Root Password：创建 root 账号密码。</p><p>User Creation：新建额外的（管理员账号）账号，可选。</p><h4 id="格式化网卡命名"><a href="#格式化网卡命名" class="headerlink" title="格式化网卡命名"></a>格式化网卡命名</h4><p>即禁用 consistent interface device naming</p><p>(1) 编辑 grub 配置文件</p><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;s&#x2F;rhgb&#x2F;net.ifnames&#x3D;0 biosdevname&#x3D;0 rhgb&#x2F;&#39; &#x2F;etc&#x2F;default&#x2F;grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2) 运行如下命令重建 grub.cfg 文件</p><pre class="line-numbers language-none"><code class="language-none"># legacy boot mode:grub2-mkconfig -o &#x2F;boot&#x2F;grub2&#x2F;grub.cfg# UEFI boot mode:grub2-mkconfig -o &#x2F;boot&#x2F;efi&#x2F;EFI&#x2F;redhat&#x2F;grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 重命名网卡配置文件</p><pre class="line-numbers language-none"><code class="language-none">mv &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens160 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0sed -i &#39;s&#x2F;ens160&#x2F;eth0&#x2F;g&#39; &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(4) 重启生效</p><pre class="line-numbers language-none"><code class="language-none">shutdown -r now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="关闭-SELinux"><a href="#关闭-SELinux" class="headerlink" title="关闭 SELinux"></a>关闭 SELinux</h4><p>SELinux 是 Linux 中最古老的一种 MAC（强制访问控制，Mandatory Access Control）模型，它是美国国家安全局的产品。除了在一些对安全有强制的要求的行业，SELinux 更多的以难以管理和排错而 “闻名”，通常认为其 “弊大于利”，许多应用安装文档中都要求关闭 SELinux。</p><p>第一种方式可以不用重启，第二种方式完成后必须重启系统</p><p>(1)立即生效</p><pre class="line-numbers language-none"><code class="language-none">setenforce 0setenforce: SELinux is disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(2) 重启系统生效</p><p>编辑配置文件 <code>/etc/selinux/config</code>：SELINUX&#x3D;disabled</p>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos内核恢复</title>
      <link href="/2022/07/21/centos7_kernel/"/>
      <url>/2022/07/21/centos7_kernel/</url>
      
        <content type="html"><![CDATA[<p>恢复教程适用手动划区安装centos7</p><p>最坏的情况<code>rm -rf /*</code>可以尝试恢复</p><p>光驱引导，进入救援模式后开始</p><h4 id="bin目录损坏的情况可选操作"><a href="#bin目录损坏的情况可选操作" class="headerlink" title="bin目录损坏的情况可选操作"></a>bin目录损坏的情况可选操作</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd &#x2F;mnt&#x2F;sysimageln -s usr&#x2F;bin bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="获取需要修复系统的root环境"><a href="#获取需要修复系统的root环境" class="headerlink" title="获取需要修复系统的root环境"></a>获取需要修复系统的root环境</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chroot &#x2F;mnt&#x2F;sysimage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="挂载光驱-需要从光驱中安装kernel"><a href="#挂载光驱-需要从光驱中安装kernel" class="headerlink" title="挂载光驱(需要从光驱中安装kernel)"></a>挂载光驱(需要从光驱中安装kernel)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk#查看光驱盘符mkdir &#x2F;123#创建目录mount &#x2F;dev&#x2F;sr0 &#x2F;123#光驱盘挂载到创建的文件夹rpm -ivh &#x2F;123&#x2F;Packages&#x2F;kernel-3.....  --force#本地强制安装内核<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ufei启动需要安装"><a href="#ufei启动需要安装" class="headerlink" title="ufei启动需要安装"></a>ufei启动需要安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rpm -ivh grub2-efi-x64-modules-2.02-0.64.el7.centos.noarch.rpm --force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="接着修复grub2引导"><a href="#接着修复grub2引导" class="headerlink" title="接着修复grub2引导"></a>接着修复grub2引导</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk#多块磁盘需要确认安装的位置grub2-install &#x2F;dev&#x2F;sda#安装到系统盘位置grub2-mkconfig &gt; &#x2F;boot&#x2F;grub2&#x2F;grub.cfg #生成grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重新安装内核前可以删除<code>/mnt/sysimage/boot</code>目录下的文件，&#x2F;boot&#x2F;efi&#x2F;可能会删不掉。没关系，这个空文件夹不影响</p><p><strong>前面提到手动分区，主要是可以恢复手动分区小的文件——运气要好~</strong></p><p><code>df -h</code>与<code>lsblk</code>都看不到&#x2F;mnt&#x2F;sysimage目录（相当于根目录）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lvm -vgchange -ay<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后挂载出系统盘目录拷贝数据</p>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库命令行使用</title>
      <link href="/2022/06/09/MySQL_use/"/>
      <url>/2022/06/09/MySQL_use/</url>
      
        <content type="html"><![CDATA[<h4 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h4><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p#登录mysql, 输入后直接回车才能输入密码mysql -uroot -p123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">create database test;#创建一个测试数据库(需要时英文分号）use test;#切到测试数据库show tables;#查看所有的表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建数据表</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test (name VARCHAR(20),owenr VARCHAR(20),species VARCHAR(20),sex CHAR(1),brith DATE,death DATE);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">describe test;#查看类别show dagabases;#查看有几个数据select * from news limit 0,10;#取数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">show global variables like &#39;port&#39;; #查看mysql端口号select host,user from user;#查看root账号权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ps -ef|grep mysqld#查看mysql进程netstat -anpt#查看mysql 监听的端口和ip是否正常service mysqld stop#停止mysqlervice mysqld start#启动service mysqld restart#重启tcpdump port 3306#端口抓包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven项⽬构建和管理⼯具安装</title>
      <link href="/2022/06/09/Maven/"/>
      <url>/2022/06/09/Maven/</url>
      
        <content type="html"><![CDATA[<p>Maven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。</p><p>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。</p><p>Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>上传Maven源码包到服务器</p><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\apache-maven-3.8.5-bin.tar.gz root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf &#x2F;opt&#x2F;apache-maven-3.8.5-bin.tar.gz -C &#x2F;usr&#x2F;localmv &#x2F;usr&#x2F;local&#x2F;apache-maven-3.8.5 &#x2F;usr&#x2F;local&#x2F;maven<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="配置MAVEN阿⾥云加速镜像源"><a href="#配置MAVEN阿⾥云加速镜像源" class="headerlink" title="配置MAVEN阿⾥云加速镜像源"></a>配置MAVEN阿⾥云加速镜像源</h4><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;local&#x2F;maven&#x2F;conf&#x2F;settings.xml在&lt;mirrors&gt;&lt;&#x2F;mirrors&gt;标签对⾥添加如下内容    &lt;mirror&gt;      &lt;id&gt;alimaven&lt;&#x2F;id&gt;      &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;      &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;    &lt;&#x2F;mirror&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;maven.shexport MAVEN_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;mavenexport PATH&#x3D;$MAVEN_HOME&#x2F;bin:$PATHsource &#x2F;etc&#x2F;profile#刷新环境变量mvn –v#检验安装结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat安装</title>
      <link href="/2022/06/09/Tomcat/"/>
      <url>/2022/06/09/Tomcat/</url>
      
        <content type="html"><![CDATA[<p>TOMCAT是APACHE 软件基金会（APACHE SOFTWARE FOUNDATION）的JAKARTA 项目中的一个核心项目，由APACHE、SUN 和其他一些公司及个人共同开发而成。因为TOMCAT 技术先进、性能稳定，而且免费，因而深受JAVA 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的WEB 应用服务器。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>上传Tomcat源码包服务器</p><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\apache-tomcat-8.5.79.tar.gz root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf &#x2F;opt&#x2F;apache-tomcat-8.5.79.tar.gz -C &#x2F;usr&#x2F;localmv &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.79 &#x2F;usr&#x2F;local&#x2F;tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;tomcat&#x2F;bin.&#x2F;startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p><a href="http://ip:8080/">http://ip:8080</a></p><h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim &#x2F;etc&#x2F;init.d&#x2F;tomcat#!&#x2F;bin&#x2F;bash  # This is the init script for starting up the  #  Jakarta Tomcat server  #  # chkconfig: 345 91 10  # description: Starts and stops the Tomcat daemon.  #  # Source function library.  . &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;functions  # Get config.  . &#x2F;etc&#x2F;sysconfig&#x2F;network  # Check that networking is up.  [ &quot;$&#123;NETWORKING&#125;&quot; &#x3D; &quot;no&quot; ] &amp;&amp; exit 0export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;defaulttomcat_home&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcatstartup&#x3D;$tomcat_home&#x2F;bin&#x2F;startup.sh  shutdown&#x3D;$tomcat_home&#x2F;bin&#x2F;shutdown.sh  start()&#123;     echo -n &quot;Starting Tomcat service:&quot;     cd $tomcat_home     $startup     echo &quot;tomcat is succeessfully started up&quot;  &#125;  stop()&#123;     echo -n &quot;Shutting down tomcat: &quot;     cd $tomcat_home     $shutdown     echo &quot;tomcat is succeessfully shut down.&quot;  &#125;  status()&#123;      numproc&#x3D;&#96;ps -ef | grep catalina | grep -v &quot;grep catalina&quot; | wc -l&#96;      if [ $numproc -gt 0 ]; then         echo &quot;Tomcat is running...&quot;      else         echo &quot;Tomcat is stopped...&quot;      fi  &#125;  restart()&#123;     stop     start  &#125;    # See how we were called.  case &quot;$1&quot; in  start)     start     ;;  stop)     stop     ;;  status)     status     ;;  restart)     restart     ;;  *)     echo $&quot;Usage: $0 &#123;start|stop|status|restart&#125;&quot;     exit 1  esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chmod +x &#x2F;etc&#x2F;init.d&#x2F;tomcatchkconfig --add tomcatchkconfig tomcat onservice tomcat startservice tomcat status...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre class="line-numbers language-none"><code class="language-none">tail -300f &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;logs&#x2F;catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库部署和安装</title>
      <link href="/2022/06/09/MySQL/"/>
      <url>/2022/06/09/MySQL/</url>
      
        <content type="html"><![CDATA[<p>​MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</p><h4 id="上传MySQL源码包到服务器"><a href="#上传MySQL源码包到服务器" class="headerlink" title="上传MySQL源码包到服务器"></a>上传MySQL源码包到服务器</h4><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="卸载系统⾃带的MariaDB（如果有）"><a href="#卸载系统⾃带的MariaDB（如果有）" class="headerlink" title="卸载系统⾃带的MariaDB（如果有）"></a>卸载系统⾃带的MariaDB（如果有）</h5><pre class="line-numbers language-none"><code class="language-none">rpm -qa|grep mariadbyum -y remove mariadb-libs-5.5.68-1.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><pre class="line-numbers language-none"><code class="language-none">tar -zxvf &#x2F;opt&#x2F;mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz -C&#x2F;usr&#x2F;localmv &#x2F;usr&#x2F;local&#x2F;mysql-5.7.30-linux-glibc2.12-x86_64 &#x2F;usr&#x2F;local&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="创建MySQL⽤户和⽤户组"><a href="#创建MySQL⽤户和⽤户组" class="headerlink" title="创建MySQL⽤户和⽤户组"></a>创建MySQL⽤户和⽤户组</h4><pre class="line-numbers language-none"><code class="language-none">groupadd mysqluseradd -g mysql mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="同时新建-x2F-usr-x2F-local-x2F-mysql-x2F-data⽬录，后续备⽤"><a href="#同时新建-x2F-usr-x2F-local-x2F-mysql-x2F-data⽬录，后续备⽤" class="headerlink" title="同时新建&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data⽬录，后续备⽤"></a>同时新建&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data⽬录，后续备⽤</h4><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改MySQL⽬录的归属⽤户"><a href="#修改MySQL⽬录的归属⽤户" class="headerlink" title="修改MySQL⽬录的归属⽤户"></a>修改MySQL⽬录的归属⽤户</h4><pre class="line-numbers language-none"><code class="language-none">chown -R mysql:mysql .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="准备MySQL的配置⽂件"><a href="#准备MySQL的配置⽂件" class="headerlink" title="准备MySQL的配置⽂件"></a>准备MySQL的配置⽂件</h3><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf[mysql]#设置mysql客户端默认字符集default-character-set&#x3D;utf8socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock[mysqld]skip-name-resolve#设置3306端⼝port &#x3D; 3306socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock#设置mysql的安装⽬录basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql#设置mysql数据库的数据的存放⽬录datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data#允许最⼤连接数max_connections&#x3D;200#服务端使⽤的字符集默认为8⽐特编码的latin1字符集character-set-server&#x3D;utf8#创建新表时将使⽤的默认存储引擎default-storage-engine&#x3D;INNODBlower_case_table_names&#x3D;1max_allowed_packet&#x3D;16M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建-x2F-var-x2F-lib-x2F-mysql⽬录，并修改权限"><a href="#创建-x2F-var-x2F-lib-x2F-mysql⽬录，并修改权限" class="headerlink" title="创建&#x2F;var&#x2F;lib&#x2F;mysql⽬录，并修改权限"></a>创建&#x2F;var&#x2F;lib&#x2F;mysql⽬录，并修改权限</h4><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;var&#x2F;lib&#x2F;mysqlchmod 777 &#x2F;var&#x2F;lib&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="正式开始安装MYSQL"><a href="#正式开始安装MYSQL" class="headerlink" title="正式开始安装MYSQL"></a>正式开始安装MYSQL</h3><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;mysql.&#x2F;bin&#x2F;mysqld --initialize --user&#x3D;mysql --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>记住上⾯打印出来的root的密码，后⾯⾸次登陆需要使⽤</strong></p><h4 id="复制启动脚本到资源⽬录并修改"><a href="#复制启动脚本到资源⽬录并修改" class="headerlink" title="复制启动脚本到资源⽬录并修改"></a>复制启动脚本到资源⽬录并修改</h4><pre class="line-numbers language-none"><code class="language-none">cp .&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysqldvim &#x2F;etc&#x2F;init.d&#x2F;mysqldbasedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysqldatadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置MySQL系统服务并开启⾃启"><a href="#设置MySQL系统服务并开启⾃启" class="headerlink" title="设置MySQL系统服务并开启⾃启"></a>设置MySQL系统服务并开启⾃启</h4><pre class="line-numbers language-none"><code class="language-none">chmod +x &#x2F;etc&#x2F;init.d&#x2F;mysqld#增加mysqld服务控制脚本执⾏权限chkconfig --add mysqld#将mysqld服务加⼊到系统服务chkconfig --list mysqld#检查mysqld服务是否已经⽣效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="启动mysqld"><a href="#启动mysqld" class="headerlink" title="启动mysqld"></a>启动mysqld</h4><pre class="line-numbers language-none"><code class="language-none">service mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将MySQL的BIN⽬录加⼊PATH环境变量"><a href="#将MySQL的BIN⽬录加⼊PATH环境变量" class="headerlink" title="将MySQL的BIN⽬录加⼊PATH环境变量"></a>将MySQL的BIN⽬录加⼊PATH环境变量</h3><p>⽅便以后在任意⽬录上都可以使⽤mysql提供的命令</p><pre class="line-numbers language-none"><code class="language-none">vim ~&#x2F;.bash_profileexport PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin:$PATH#文件末尾添加source ~&#x2F;.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="⾸次登陆MySQL"><a href="#⾸次登陆MySQL" class="headerlink" title="⾸次登陆MySQL"></a>⾸次登陆MySQL</h3><p>以root账户登录mysql，使⽤上⽂安装完成提示的密码进⾏登⼊</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改root账户密码"><a href="#修改root账户密码" class="headerlink" title="修改root账户密码"></a>修改root账户密码</h4><pre class="line-numbers language-none"><code class="language-none">alter user user() identified by&quot;123&quot;;#将密码设置成简单的“123”flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="设置远程主机登录"><a href="#设置远程主机登录" class="headerlink" title="设置远程主机登录"></a>设置远程主机登录</h4><pre class="line-numbers language-none"><code class="language-none">use mysql;update user set user.Host&#x3D;&#39;%&#39;where user.User&#x3D;&#39;root&#39;;flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>NAVICAT等⼯具进⾏测试。。。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL</title>
      <link href="/2022/06/07/PostgreSQL/"/>
      <url>/2022/06/07/PostgreSQL/</url>
      
        <content type="html"><![CDATA[<p>PostgreSQL 是一个免费的对象-关系数据库服务器(ORDBMS)，在灵活的BSD许可证下发行。</p><p>PostgreSQL 开发者把它念作 <strong>post-gress-Q-L</strong>。</p><p>PostgreSQL 的 Slogan 是 “世界上最先进的开源关系型数据库”。</p><p>[PostgreSQL官网下载](<a href="https://www.postgresql.org/download/linux/redhat/">PostgreSQL: Linux downloads (Red Hat family)</a>)<a href="http://www.postgres.cn/docs/12/installation.html">官方教程</a><a href="https://wiki.archlinux.org/title/PostgreSQL_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">arch_wiki教程</a></p><h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><p>yum安装</p><pre class="line-numbers language-none"><code class="language-none">yum install postgresql postgresql-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo yum install -y https:&#x2F;&#x2F;download.postgresql.org&#x2F;pub&#x2F;repos&#x2F;yum&#x2F;reporpms&#x2F;EL-7-x86_64&#x2F;pgdg-redhat-repo-latest.noarch.rpm#安装rpm源sudo yum install -y postgresql14-server#安装PostgreSQLsudo &#x2F;usr&#x2F;pgsql-14&#x2F;bin&#x2F;postgresql-14-setup initdb#初始化数据库并启用自动启动sudo systemctl enable postgresql-14sudo systemctl start postgresql-14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">su postgres#切换到普通用户psql#登录ALTER USER postgres WITH PASSWORD &#39;新密码&#39;;#改密码\q#退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开防火墙"><a href="#开防火墙" class="headerlink" title="开防火墙"></a>开防火墙</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">firewall-cmd --add-service&#x3D;postgresql#添加端口firewall-cmd --add-service&#x3D;postgresql --permanent#重启后依然有效firewall-cm --info-service&#x3D;postgresql#查看这个服务到底是什么端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="line-numbers language-none"><code class="language-none">creat database 名字；CREATE EXTENSION xxx;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><pre class="line-numbers language-none"><code class="language-none">make --version#版本3.80或以上<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">.&#x2F;configuremakesumake installadduser postgresmkdir &#x2F;usr&#x2F;local&#x2F;pgsql&#x2F;datachown postgres &#x2F;usr&#x2F;local&#x2F;pgsql&#x2F;datasu - postgres&#x2F;usr&#x2F;local&#x2F;pgsql&#x2F;bin&#x2F;initdb -D &#x2F;usr&#x2F;local&#x2F;pgsql&#x2F;data&#x2F;usr&#x2F;local&#x2F;pgsql&#x2F;bin&#x2F;pg_ctl -D &#x2F;usr&#x2F;local&#x2F;pgsql&#x2F;data -l logfile start&#x2F;usr&#x2F;local&#x2F;pgsql&#x2F;bin&#x2F;createdb test&#x2F;usr&#x2F;local&#x2F;pgsql&#x2F;bin&#x2F;psql test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MariaDB基本使用</title>
      <link href="/2022/06/07/MariaDB/"/>
      <url>/2022/06/07/MariaDB/</url>
      
        <content type="html"><![CDATA[<p>MariaDB是MySQL关系数据库管理系统的一个分支。类似MySQL数据库</p><h5 id="查看是否安装"><a href="#查看是否安装" class="headerlink" title="查看是否安装"></a>查看是否安装</h5><pre class="line-numbers language-none"><code class="language-none">systemctl status mariadbrpm -qa|grep mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><pre class="line-numbers language-none"><code class="language-none">yum -y remove mariadbxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><pre class="line-numbers language-none"><code class="language-none">yum install mariadb mariadb-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><pre class="line-numbers language-none"><code class="language-none">systemctl start mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><pre class="line-numbers language-none"><code class="language-none">mysql_secure_installation密码为空，是否创建新密码y密码移除匿名用户y不允许root用户远程登录y移除测试数据库y重新加载数据库权限y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><pre class="line-numbers language-none"><code class="language-none">mysql -uroot -pmariadbpasswd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><pre class="line-numbers language-none"><code class="language-none">show databases;create database abc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>创建用户</strong>123，密码456，每个IP都可访问</p><pre class="line-numbers language-none"><code class="language-none">create user &#39;123&#39;@&#39;%&#39; identified by &#39;456&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>设置数据库专用账号密码</strong>赋予用户数据库权限</p><pre class="line-numbers language-none"><code class="language-none">grant all on abc.* to &#39;123&#39;@&#39;%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h4><pre class="line-numbers language-none"><code class="language-none">use abc;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><pre class="line-numbers language-none"><code class="language-none">show tables;create table admin(username varchar(15) not null unique,pasword varchar(20) ,question varchar(20) ,answer varchar(50));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="展示列表项"><a href="#展示列表项" class="headerlink" title="展示列表项"></a>展示列表项</h5><pre class="line-numbers language-none"><code class="language-none">show columns from admin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><pre class="line-numbers language-none"><code class="language-none">insert into admin values (&quot;admin&quot;,&quot;123456&quot;,&quot;&quot;,&quot;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h5><pre class="line-numbers language-none"><code class="language-none">select * from admin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><pre class="line-numbers language-none"><code class="language-none">update admin set question&#x3D;&quot;dadada&quot; where username&#x3D;&quot;admin&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="删除数据表中的数据"><a href="#删除数据表中的数据" class="headerlink" title="删除数据表中的数据"></a>删除数据表中的数据</h5><pre class="line-numbers language-none"><code class="language-none">delete from admin where username&#x3D;&quot;admin&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h5><pre class="line-numbers language-none"><code class="language-none">drop table admin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="打开防火墙指定端口"><a href="#打开防火墙指定端口" class="headerlink" title="打开防火墙指定端口"></a>打开防火墙指定端口</h4><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --add-port&#x3D;3306&#x2F;tcp --zone&#x3D;public --permanentsystemctl restart firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><pre class="line-numbers language-none"><code class="language-none">systemctl enable mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#!&#x2F;bin&#x2F;bash# ------------------------------------------# Filename: mariadb_384.sh# Revision: 1.1# Description: yum install mariadb on centos7.4# Date: 2022-08-01# Author: clarencegridknow&#x3D;&#x2F;usr&#x2F;local&#x2F;gridknowusername&#x3D;rootpassword&#x3D;123456#安装服务并拷贝配置文件    yum -y install mariadb-server mariadbecho &quot;[client]port            &#x3D; 3306default-character-set &#x3D; utf8[mysqld]datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysqlsocket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock#addport            &#x3D; 3306skip-name-resolvekey_buffer_size &#x3D; 96Mtable_cache &#x3D; 256sort_buffer_size &#x3D; 3Mjoin_buffer_size &#x3D; 3Mnet_buffer_length &#x3D; 8Kread_buffer_size &#x3D; 3Mread_rnd_buffer_size &#x3D; 1Mmax_allowed_packet &#x3D; 128Mmax_heap_table_size &#x3D; 32Mtmp_table_size &#x3D; 512Mback_log &#x3D; 100default-storage-engine&#x3D;MyISAMwait_timeout &#x3D; 3880000interactive_timeout &#x3D; 3880000thread_cache_size &#x3D; 256thread_concurrency &#x3D; 8log_bin_trust_function_creators &#x3D; 1event_scheduler &#x3D; 1binlog_cache_size &#x3D; 1Mlower_case_table_names &#x3D; 1character_set_server &#x3D; utf8max_connections &#x3D; 4000max_connect_errors &#x3D; 1000000max_prepared_stmt_count &#x3D; 1048575wait_timeout &#x3D; 3880000interactive_timeout &#x3D; 3880000query_cache_size &#x3D; 128Mquery_cache_limit &#x3D; 2Mexpire_logs_days &#x3D; 7log-bin &#x3D; mysql-binlog-bin-index &#x3D; binlog.indexserver-id &#x3D; 33061binlog_format &#x3D; ROWrelay-log &#x3D; mysql-relay-bininnodb_buffer_pool_size &#x3D; 1024Minnodb_additional_mem_pool_size &#x3D; 2Minnodb_log_file_size &#x3D; 64Minnodb_log_buffer_size &#x3D; 8M[mysqldump]quickmax_allowed_packet &#x3D; 128M[mysql]no-auto-rehash[isamchk]key_buffer &#x3D; 20Msort_buffer_size &#x3D; 20Mread_buffer &#x3D; 2Mwrite_buffer &#x3D; 2M[myisamchk]key_buffer &#x3D; 20Msort_buffer_size &#x3D; 20Mread_buffer &#x3D; 2Mwrite_buffer &#x3D; 2M[mysqlhotcopy]interactive-timeout &#x3D; 7200# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links&#x3D;0# Settings user and group are ignored when systemd is used.# If you need to run mysqld under a different user or group,# customize your systemd unit file for mariadb according to the# instructions in http:&#x2F;&#x2F;fedoraproject.org&#x2F;wiki&#x2F;Systemd[mysqld_safe]log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.logpid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mariadb&#x2F;mariadb.pid## include all files from the config directory#!includedir &#x2F;etc&#x2F;my.cnf.d&quot; &gt;&#x2F;etc&#x2F;my.cnf#启动服务并设置为开机自动启动    systemctl start mariadb    systemctl enable mariadb#配置密码；创建数据库；导入数据库；修改权限    mysqladmin -u $username password $password    mysql -u$&#123;username&#125; -p$&#123;password&#125; -e &quot;create database cdms;create database datamanage2;create database userinternet_record;create database alertmsg;create database zkconfig;create database apgs3;create database iteamwebnew;create database appstore;create database pmchat;create database ephemeris;create database pmdashboard;create database gk_user_center;create database pmoa;create database gkrm;create database produce-data;create database gkskdsvr;create database push_server;create database gktomcat;GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; identified by &#39;mariadbpasswd&#39; with grant option;flush privileges;quit &quot;sed -i &quot;34i LimitNOFILE&#x3D;10000&quot; &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mariadb.servicesed -i &quot;35i LimitNPROC&#x3D;10000&quot; &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mariadb.servicesystemctl --system daemon-reloadsystemctl restart mariadbecho &#39;------------mariadb has been installed and completed------------&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> MariaDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备份</title>
      <link href="/2022/06/06/back_up/"/>
      <url>/2022/06/06/back_up/</url>
      
        <content type="html"><![CDATA[<p><strong>备份使用的工具有哪些?</strong></p><h4 id="本地备份-cp"><a href="#本地备份-cp" class="headerlink" title="本地备份: cp"></a>本地备份: cp</h4><h4 id="远程备份-scp-rsync-sz-rz"><a href="#远程备份-scp-rsync-sz-rz" class="headerlink" title="远程备份: scp rsync sz rz"></a>远程备份: scp rsync sz rz</h4><p>rsync 远程同步工具</p><ul><li>实现主机与主机之间的同步, 实现增量的同步. linux\windows\mac</li><li>PS: 如果将rsync当一个服务来使用,则需要知道 rsync 是个 c&#x2F;s架构</li></ul><p><strong>rsync备份工具应用几种场景?</strong></p><ul><li>推 客户端推送数据至服务端 电脑—&gt;云盘</li><li>拉 客户端拉取服务上的数据 电脑 &lt;—- 云盘</li></ul><p><strong>rsync三大传输模式</strong></p><pre class="line-numbers language-none"><code class="language-none">yum install rsync -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>本地传输</strong>类似于使用cp</p><pre class="line-numbers language-none"><code class="language-none">Local:  rsync [OPTION...] SRC... [DEST]rsync -avz oldxu.com &#x2F;tmp&#x2F;#文件rsync -avz &#x2F;etc&#x2F; &#x2F;tmp&#x2F;#目录每次拷贝都是增量1，如果有新增, 拷贝新增2，如果修改历史拷贝过的文件, 则同步修改后的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>远程传输</strong>类似于scp,基于ssh协议</p><pre class="line-numbers language-none"><code class="language-none">Pull: rsync [OPTION...] [USER@]HOST:SRC... [DEST]rsync -avz root@172.16.1.31:&#x2F;root&#x2F;31.txt .&#x2F;#下载31服务器上&#x2F;root&#x2F;31.txt文件,至本地的当前目录,使用31的root身份rsync -avz root@172.16.1.31:&#x2F;opt&#x2F;etc_test&#x2F; .&#x2F;#下载目录,以及目录下的所有内容至本地rsync -avz root@172.16.1.31:&#x2F;opt&#x2F;etc_test .&#x2F;&#96;#下载这个目录下的所有内容至本地<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Push: rsync [OPTION...] SRC... [USER@]HOST:DESTrsync -avz .&#x2F;41.txt root@172.16.1.31:&#x2F;opt&#x2F;#推送本地的文件或目录,至远程主机31的&#x2F;opt目录下,使用的是31的root身份<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>归档模式传输, 等于-tropgD</td></tr><tr><td>-v</td><td>详细模式输出, 打印速率, 文件数量等</td></tr><tr><td>-z</td><td>传输时进行压缩以提高效率</td></tr><tr><td>-r</td><td>递归传输目录及子目录，即目录下得所有目录都同样传输。</td></tr><tr><td>-t</td><td>保持文件时间信息</td></tr><tr><td>-o</td><td>保持文件属主信息</td></tr><tr><td>-p</td><td>保持文件权限</td></tr><tr><td>-g</td><td>保持文件属组信息</td></tr><tr><td>-l</td><td>保留软连接</td></tr><tr><td>-P</td><td>显示同步的过程及传输时的进度等信息</td></tr><tr><td>-D</td><td>保持设备文件信息</td></tr><tr><td>L</td><td>保留软连接指向的目标文件</td></tr><tr><td>e</td><td>使用的信道协议,指定替代rsh的shell程序 -e ‘ssh’</td></tr><tr><td>–exclude&#x3D;PATTERN</td><td>指定排除不需要传输的文件模式</td></tr><tr><td>–exclude-from&#x3D;file</td><td>文件名所在的目录文件</td></tr><tr><td>–bwlimit&#x3D;100</td><td>限速传输</td></tr><tr><td>–partial</td><td>断点续传</td></tr><tr><td>–delete</td><td>让目标目录和源目录数据保持一致</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache HBase</title>
      <link href="/2022/06/02/HBase/"/>
      <url>/2022/06/02/HBase/</url>
      
        <content type="html"><![CDATA[<p>Apache HBase是基于Hadoop构建的一个<strong>分布式</strong>的、<strong>可伸缩</strong>的海量数据存储系统。</p><p>HBase常被用来存放一些结构简单，但数据量非常大的数据(通常在TB级别以上)，如历史订单记录，日志数据，监控Metris数据等等，HBase提供了简单的基于Key值的快速查询能力。</p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p><strong>RowKey</strong></p><p>用来表示唯一一行记录的<strong>主键</strong>，HBase的数据是按照RowKey的<strong>字典顺序</strong>进行全局排序的，所有的查询都只能依赖于这一个排序维度。</p><p><strong>稀疏矩阵</strong></p><p>每一行中，列的组成都是灵活的，行与行之间并不需要遵循相同的列定义， 也就是HBase数据表”schema-less”的特点。</p><p><strong>Region</strong></p><p>将HBase中拥有数亿行的一个大表，横向切割成一个个”子表”，这一个个”子表”就是Region</p><p>Region是HBase中负载均衡的基本单元，当一个Region增长到一定大小以后，会自动分裂成两个。</p><p><strong>Column Family</strong></p><p>如果将Region看成是一个表的横向切割，那么，一个Region中的数据列的纵向切割，称之为一个Column Family。每一个列，都必须归属于一个Column Family，这个归属关系是在写数据时指定的，而不是建表时预先定义。</p><p><strong>KeyValue</strong></p><p>KeyValue是支撑”稀疏矩阵”设计的一个关键点：一些Key相同的任意数量的独立KeyValue就可以构成一行数据。但这种设计带来的一个显而易见的缺点：每一个KeyValue所携带的自我描述信息，会带来显著的数据膨胀。</p><h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><p><strong>适合HBase存储的数据</strong></p><ul><li>以实体为中心的数据</li><li>以事件为中心的数据</li></ul><p>这些数据，有的是结构化数据，有的是半结构化或非结构化数据。HBase的“稀疏矩阵”设计，使其应对非结构化数据存储时能够得心应手</p><h2 id="HBase与HDFS"><a href="#HBase与HDFS" class="headerlink" title="HBase与HDFS"></a>HBase与HDFS</h2><p>HBase是一个分布式数据库，HDFS是一个分布式文件系统</p>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建</title>
      <link href="/2022/05/27/hexo/"/>
      <url>/2022/05/27/hexo/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p><strong>hexo需要Node.js&#x2F;Git来支持</strong></p><ul><li><p><a href="http://nodejs.org/">Node.js</a>(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</p></li><li><p><a href="http://git-scm.com/">Git</a></p></li></ul><p>安装</p><p><a href="https://nodejs.org/dist/latest/">node最新版</a> <a href="https://nodejs.org/dist/v16.15.0/node-v16.15.0-linux-x64.tar.xz">node长期支持版</a></p><h5 id="上传node源码包到服务器"><a href="#上传node源码包到服务器" class="headerlink" title="上传node源码包到服务器"></a>上传node源码包到服务器</h5><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\node-v16.15.0-linux-x64.tar.xz root@192.168.200.98:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;usr&#x2F;local&#x2F;nodetar -xJvf &#x2F;opt&#x2F;node-v16.15.0-linux-x64.tar.xz -C &#x2F;usr&#x2F;local&#x2F;node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><pre class="line-numbers language-none"><code class="language-none">yum -y install epel-release wege gcc pcre-devel zlib-devel git-core<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="编辑主目录下的配置文件，添加路径"><a href="#编辑主目录下的配置文件，添加路径" class="headerlink" title="编辑主目录下的配置文件，添加路径"></a>编辑主目录下的配置文件，添加路径</h5><pre class="line-numbers language-none"><code class="language-none">vim ~&#x2F;.bash_profileexport PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;node&#x2F;node-v16.15.0-linux-x64&#x2F;bin:$PATHsource ~&#x2F;.bash_profile#刷新环境变量node -v#验证npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局切换到淘宝的cnpm国内镜像源</p><pre class="line-numbers language-none"><code class="language-none">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.orgcnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="安装hexo博客框架"><a href="#安装hexo博客框架" class="headerlink" title="安装hexo博客框架"></a>安装hexo博客框架</h4><pre class="line-numbers language-none"><code class="language-none">cnpm install -g hexo-cli#cnpm安装hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="上传备份hexo包到服务器"><a href="#上传备份hexo包到服务器" class="headerlink" title="上传备份hexo包到服务器"></a>上传备份hexo包到服务器</h5><pre class="line-numbers language-none"><code class="language-none">scp C:\Users\zhong\OneDrive\blog\blog.tar.gz root@192.168.200.98:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h5><pre class="line-numbers language-none"><code class="language-none">tar -zxvf &#x2F;opt&#x2F;blog.tar.gz -C &#x2F;root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h5><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;root&#x2F;bloghexo n &quot;123&quot;#新建一篇博文hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="访问地址IP端口4000"><a href="#访问地址IP端口4000" class="headerlink" title="访问地址IP端口4000"></a><a href="http://localhost:4000/">访问地址</a>IP端口4000</h5><p>安装后台<!--可选--></p><pre class="line-numbers language-none"><code class="language-none">cnpm install --save hexo-admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="http://localhost:4000/admin">访问地址</a>IP端口4000&#x2F;admin</p><h5 id="准备上传到GitHub静态"><a href="#准备上传到GitHub静态" class="headerlink" title="准备上传到GitHub静态"></a>准备上传到GitHub静态</h5><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;root&#x2F;bloghexo clean#清除缓存hexo g#生成静态网页cnpm install --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>hexo配置文件：&#x2F;root&#x2F;blog&#x2F;_config.yml</p><p>主题配置文件：&#x2F;root&#x2F;blog&#x2F;themes&#x2F;next&#x2F;_config.yml</p><h5 id="临时添加代理"><a href="#临时添加代理" class="headerlink" title="临时添加代理"></a>临时添加代理</h5><pre class="line-numbers language-none"><code class="language-none">export http_proxy&#x3D;&#39;http:&#x2F;&#x2F;192.168.200.29:7890&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="生成静态网页并将本地数据部署到设定的GitHub"><a href="#生成静态网页并将本地数据部署到设定的GitHub" class="headerlink" title="生成静态网页并将本地数据部署到设定的GitHub"></a>生成静态网页并将本地数据部署到设定的GitHub</h5><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>备份博客</p><pre class="line-numbers language-none"><code class="language-none">cdtar -zcvf 博客.tar.gz .&#x2F;blog&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一键删除博客</p><pre class="line-numbers language-none"><code class="language-none">rm -rf &#x2F;root&#x2F;blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新生成博客文件</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索插件</p><pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文章字数统计插件</p><pre class="line-numbers language-none"><code class="language-none">cnpm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机基础设置</title>
      <link href="/2022/05/22/basic_virtual/"/>
      <url>/2022/05/22/basic_virtual/</url>
      
        <content type="html"><![CDATA[<ol><li><p>固定IP</p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens192<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关防火墙</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld.servicesystemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装源</p><pre class="line-numbers language-none"><code class="language-none">yum install epel-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装vim</p><pre class="line-numbers language-none"><code class="language-none">yum -y install vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关se(重启生效)</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;selinux&#x2F;configSELINUX&#x3D;disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>改hostname</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加hosts</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>节点间免密</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsassh-copy-id node1ssh-copy-id node2,,,,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装jdk</p><pre class="line-numbers language-none"><code class="language-none">rpm -ivh jdk-8u333-linux-x64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认home路径：&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64</p><p>添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;java.shexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64export CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;binsource &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集群内部免密</title>
      <link href="/2022/05/21/keygen_ssh/"/>
      <url>/2022/05/21/keygen_ssh/</url>
      
        <content type="html"><![CDATA[<p>vim &#x2F;etc&#x2F;hosts</p><p>命令模式dd删除头两行后添加</p><p>192.168.200.99 node01</p><p>192.168.200.98 node02</p><p>，，，以此类推</p><p>多执行模式</p><p>机器产生自己的公钥</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将公钥拷贝给每台机器</p><pre class="line-numbers language-none"><code class="language-none">ssh-copy-id node01ssh-copy-id node02,,,,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos环境变量</title>
      <link href="/2022/05/20/etcprofile_path/"/>
      <url>/2022/05/20/etcprofile_path/</url>
      
        <content type="html"><![CDATA[<p>不修改&#x2F;etc&#x2F;profile，新增&#x2F;etc&#x2F;profile.d&#x2F;文件夹下.sh文件</p><p>参考&#x2F;etc&#x2F;profile中 <code>55  for i in /etc/profile.d/*.sh ; do</code>这句</p><h3 id="x2F-etc-x2F-profile-d-x2F-sh"><a href="#x2F-etc-x2F-profile-d-x2F-sh" class="headerlink" title="&#x2F;etc&#x2F;profile.d&#x2F;*.sh"></a>&#x2F;etc&#x2F;profile.d&#x2F;*.sh</h3><p>弃用 vim &#x2F;etc&#x2F;profile</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;java.shexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;defaultexport CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;hadoop.shexport HADOOP_HOME&#x3D;&#x2F;opt&#x2F;hadoop-2.7.1export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;git.shexport GIT_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;git&#x2F;git-2.36.1export PATH&#x3D;$PATH:$GIT_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;hbase.shexport HBASE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;hbase&#x2F;hbase-2.4.12&#x2F;export PATH&#x3D;$PATH:$HBASE_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;maven.shexport MAVEN_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;mavenexport PATH&#x3D;$MAVEN_HOME&#x2F;bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>source &#x2F;etc&#x2F;profile</p>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZooKeeper</title>
      <link href="/2022/05/19/ZooKeeper/"/>
      <url>/2022/05/19/ZooKeeper/</url>
      
        <content type="html"><![CDATA[<p>在一个拥有多个节点的分布式系统中，假设，只能有一个节点是主节点，如何快速的选举出一个主节点而且让所有的节点都认可这个主节点？</p><p>利用ZooKeeper就可以非常简单的实现这类”仲裁”需求，ZooKeeper还提供了基础的事件通知机制，所有的数据都以 ZNode的形式存在，它也称得上是一个”微型数据库”。</p><h4 id="上传zookeeper压缩包"><a href="#上传zookeeper压缩包" class="headerlink" title="上传zookeeper压缩包"></a>上传zookeeper压缩包</h4><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\apache-zookeeper-3.8.0-bin.tar.gz root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;usr&#x2F;local&#x2F;zookeepertar -zxvf &#x2F;opt&#x2F;apache-zookeeper-3.8.0-bin.tar.gz -C &#x2F;usr&#x2F;local&#x2F;zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="从模板拷贝zoo配置文件，配置"><a href="#从模板拷贝zoo配置文件，配置" class="headerlink" title="从模板拷贝zoo配置文件，配置"></a>从模板拷贝zoo配置文件，配置</h4><pre class="line-numbers language-none"><code class="language-none">cp &#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;apache-zookeeper-3.8.0-bin&#x2F;conf&#x2F;zoo_sample.cfg &#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;apache-zookeeper-3.8.0-bin&#x2F;conf&#x2F;zoo.cfgvim &#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;apache-zookeeper-3.8.0-bin&#x2F;conf&#x2F;zoo.cfgdataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;zkdata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;apache-zookeeper-3.8.0-bin&#x2F;.&#x2F;bin&#x2F;zkServer.sh start .&#x2F;conf&#x2F;zoo.cfg#启动zk服务器.&#x2F;bin&#x2F;zkServer.sh status .&#x2F;conf&#x2F;zoo.cfg#查看zk服务器状态.&#x2F;bin&#x2F;zkServer.sh stop .&#x2F;conf&#x2F;zoo.cfg#停止zk服务器.&#x2F;zkCli.sh#启动后进入客户端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>开机自启</strong>（需要jdk）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim &#x2F;etc&#x2F;init.d&#x2F;zookeeper#!&#x2F;bin&#x2F;bash#chkconfig:- 20 90#description:zookeeper#processname:zookeeperexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;defaultZOOKEEPER_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;apache-zookeeper-3.8.0-bin&#x2F;case $1 instart) su root $ZOOKEEPER_HOME&#x2F;bin&#x2F;zkServer.sh start;;stop) su root $ZOOKEEPER_HOME&#x2F;bin&#x2F;zkServer.sh stop;;status) su root $ZOOKEEPER_HOME&#x2F;bin&#x2F;zkServer.sh status;;restart) su root $ZOOKEEPER_HOME&#x2F;bin&#x2F;zkServer.sh restart;;*) echo &quot;require start|stop|status|restart&quot; ;;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chmod +x &#x2F;etc&#x2F;init.d&#x2F;zookeeperchkconfig --add zookeeperchkconfig zookeeper onservice zookeeper startservice zookeeper status...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内部操作"><a href="#内部操作" class="headerlink" title="内部操作"></a>内部操作</h4><pre class="line-numbers language-none"><code class="language-none">ls &#x2F;#查看根目录create &#x2F;test1create &#x2F;test2 abc#创建get &#x2F;test2#拿数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>集群</strong></p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;zkdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mkdir zk1 zk2 zk3 zk4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cd zk1&#x2F;</p><pre class="line-numbers language-none"><code class="language-none">vim myid 1echo 2 &gt; .&#x2F;zk2&#x2F;myidecho 3 &gt; .&#x2F;zk3&#x2F;myidecho 4 &gt; .&#x2F;zk4&#x2F;myid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;apache-zookeeper-3.8.0-bin&#x2F;conf</p><p>cp zoo.cfg zoo1.cfg</p><p>vim zoo1.cfg</p><pre class="line-numbers language-none"><code class="language-none">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;zkdata&#x2F;zk1server.1&#x3D;192.168.200.99:2001:3001server.2&#x3D;192.168.200.98:2002:3002server.3&#x3D;192.168.200.97:2003:3003server.4&#x3D;192.168.200.96:2004:3004:observer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;zkdata&#x2F;zk2clientPort&#x3D;2182server.1&#x3D;192.168.200.99:2001:3001server.2&#x3D;192.168.200.98:2002:3002server.3&#x3D;192.168.200.97:2003:3003server.4&#x3D;192.168.200.96:2004:3004:observer。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动集群并查看leader，follower，observer</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;bin&#x2F;zkServer.sh start .&#x2F;conf&#x2F;zoo1.cfg.&#x2F;bin&#x2F;zkServer.sh status .&#x2F;conf&#x2F;zoo1.cfg。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>连接zk集群</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;bin&#x2F;zkCli.sh -server 192.168.200.99:2181,192.168.200.98:2182,192.168.200.97:2183<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> ZooKeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2022/05/18/redis/"/>
      <url>/2022/05/18/redis/</url>
      
        <content type="html"><![CDATA[<p><strong>Remote Dictionary Server远程字典服务</strong></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><strong>yum安装</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#yum install epel-release -y#可选yum install redis#安装systemctl start redis#启动Redissystemctl status redis#查看Redis状态systemctl stop redis#停止Redissystemctl restart redis#重启Redissystemctl enable redis#加入开机自启firewall-cmd --zone&#x3D;public --add-port&#x3D;6379&#x2F;tcp --permanent#防火墙开放端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>源码安装</strong></p><p>上传redis源码包到服务器</p><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\redis-5.0.14.tar.gz root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;usr&#x2F;local&#x2F;redistar -zxvf &#x2F;opt&#x2F;redis-5.0.14.tar.gz -C &#x2F;usr&#x2F;local&#x2F;redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译安装</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis-5.0.14&#x2F;make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将REDIS安装为系统服务并后台启动</p><pre class="line-numbers language-none"><code class="language-none">cd utils&#x2F;.&#x2F;install_server.sh#此处我全部选择的默认配置即可，有需要可以按需定制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看REDIS服务启动情况</p><pre class="line-numbers language-none"><code class="language-none">ps -aux|grep redissystemctl status redis_6379.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">启动REDIS客户端并测试启动⾃带的redis-cli客户端redis-cliset foo barget foo设置允许远程连接编辑redis配置⽂件vim &#x2F;etc&#x2F;redis&#x2F;6379.conf将bind 127.0.0.1修改为0.0.0.0然后重启Redis服务systemctl restart redis_6379.service设置访问密码编辑redis配置⽂件vim &#x2F;etc&#x2F;redis&#x2F;6379.conf找到#requirepass foobared去掉注释，将foobared修改为⾃⼰想要的密码，保存即可。保存，重启Redis服务systemctl restart redis_6379.serviceauth 密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-server redis.conf#启动(redis服务加配置文件)redis-cli -p 6379#连接(redis客户端加IP加端口号)redis-cli -h 192.168.200.99 -p 6379#指定服务器主机名，默认127.0.0.1config set requirepass &quot;123&quot;#登录进去后(设置密码123)config get requirepass#查看密码auth 123#登录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置文件redis-conf"><a href="#配置文件redis-conf" class="headerlink" title="配置文件redis.conf"></a>配置文件redis.conf</h4><h5 id="INCLUDES（包含）"><a href="#INCLUDES（包含）" class="headerlink" title="INCLUDES（包含）"></a>INCLUDES（包含）</h5><p>可包含多个配置文件</p><p>include &#x2F;path&#x2F;to&#x2F;local.conf</p><p>include &#x2F;path&#x2F;to&#x2F;other.conf</p><h5 id="NETWORK（网络）"><a href="#NETWORK（网络）" class="headerlink" title="NETWORK（网络）"></a>NETWORK（网络）</h5><p>bind 127.0.0.1（默认本地访问）</p><p>bind 0.0.0.0（允许远程连接）</p><p>protected-mode yes（是否受保护）</p><p>port 6379（默认端口）</p><h5 id="GENERAL（通用）"><a href="#GENERAL（通用）" class="headerlink" title="GENERAL（通用）"></a>GENERAL（通用）</h5><p>daemonize yes（守护进程开启）后台</p><p>pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid如果是后台运行，需要指定一个pid文件</p><p>loglevel notice（debug、verbose、notice、warning）日志级别</p><p>logfile &#x2F;var&#x2F;log&#x2F;redis_6379.log（日志文件）</p><p>databases 16（数据库数量）</p><p>always-show-logo yes（显示logo）</p><h5 id="SNAPSHOTTING（快照）"><a href="#SNAPSHOTTING（快照）" class="headerlink" title="SNAPSHOTTING（快照）"></a>SNAPSHOTTING（快照）</h5><p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件.rdb，.aof</p><p>save 900 1（900秒内至少有一个key进行了修改，及进行持久化操作）<br>save 300 10（300秒内至少有10个key进行了修改，及进行持久化操作）<br>save 60 10000（一分钟内至少有10000个key进行了修改，及进行持久化操作）</p><p>stop-writes-on-bgsave-error yes（持久化出错后是否继续工作）</p><p>rdbcompression yes（是否压缩.rdb文件）</p><p>rdbchecksum yes（校验.rdb文件）</p><p>dbfilename dump.rdb（.rdb名称）</p><p>dir &#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379（.rdb文件保存目录）</p><h5 id="REPLICATION（主从复制）"><a href="#REPLICATION（主从复制）" class="headerlink" title="REPLICATION（主从复制）"></a>REPLICATION（主从复制）</h5><h5 id="SECURITY（安全）"><a href="#SECURITY（安全）" class="headerlink" title="SECURITY（安全）"></a>SECURITY（安全）</h5><p>requirepass foobared（去掉前面注释foobared改成密码）</p><h5 id="CLIENTS（客户端限制）"><a href="#CLIENTS（客户端限制）" class="headerlink" title="CLIENTS（客户端限制）"></a>CLIENTS（客户端限制）</h5><p>maxclients 10000（最大连接客户端一万个）</p><h5 id="MEMORY-MANAGEMENT（内存管理）"><a href="#MEMORY-MANAGEMENT（内存管理）" class="headerlink" title="MEMORY MANAGEMENT（内存管理）"></a>MEMORY MANAGEMENT（内存管理）</h5><p>maxmemory <bytes>（最大内存）</p><p>maxmemory-policy noeviction（内存爆了后的策略）</p><h5 id="APPEND-ONLY-MODE（-aof配置）"><a href="#APPEND-ONLY-MODE（-aof配置）" class="headerlink" title="APPEND ONLY MODE（.aof配置）"></a>APPEND ONLY MODE（.aof配置）</h5><p>appendonly no（开关）</p><p>appendfilename “appendonly.aof”（持久化文件名）</p><p>appendfsync always（每次修改执行同步）</p><p>appendfsync everysec（每秒执行一次同步）</p><p>appendfsync no（不同步）</p><p>appendfilename “appendonly.aof”（.aof名称）</p><h4 id="持久化文件"><a href="#持久化文件" class="headerlink" title="持久化文件"></a>持久化文件</h4><p>config get dir输出</p><ol><li>“dir”</li><li>“&#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379”</li></ol><p>将dump.rdb文件放到目录下会自动恢复</p><h4 id="集群、哨兵"><a href="#集群、哨兵" class="headerlink" title="集群、哨兵"></a>集群、哨兵</h4><p>单台最大内存不应该超过20gb，超过后一主三从</p><h5 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h5><p>只配置从库，不配置主库</p><p>info replication（查看当前库的信息）</p><h5 id="命令配置从节点SLAVEOF-IP-6379（暂时），修改从节点配置文件（永久）"><a href="#命令配置从节点SLAVEOF-IP-6379（暂时），修改从节点配置文件（永久）" class="headerlink" title="命令配置从节点SLAVEOF [IP] 6379（暂时），修改从节点配置文件（永久）"></a>命令配置从节点SLAVEOF [IP] 6379（暂时），修改从节点配置文件（永久）</h5><p>replicaof <masterip> <masterport></p><p>masterauth <master-password></p>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop</title>
      <link href="/2022/05/17/hadoop/"/>
      <url>/2022/05/17/hadoop/</url>
      
        <content type="html"><![CDATA[<p>Hadoop 是一个开源的分布式计算和存储框架，由 Apache 基金会开发和维护。</p><p>Hadoop 为庞大的计算机集群提供可靠的、可伸缩的应用层计算和存储支持，它允许使用简单的编程模型跨计算机群集分布式处理大型数据集，并且支持在单台计算机到几千台计算机之间进行扩展。</p><p>Hadoop 使用 Java 开发，所以可以在多种不同硬件平台的计算机上部署和使用。其核心部件包括分布式文件系统 (Hadoop DFS，HDFS) 和 MapReduce。</p><h4 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h4><h5 id="确认java安装成功"><a href="#确认java安装成功" class="headerlink" title="确认java安装成功"></a>确认java安装成功</h5><pre class="line-numbers language-none"><code class="language-none">java -versionrpm -qa | grep jdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="卸载其他版本"><a href="#卸载其他版本" class="headerlink" title="卸载其他版本"></a>卸载其他版本</h5><pre class="line-numbers language-none"><code class="language-none">yum -y remove java...或者rpm -e --nodeps jdk...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="上传jdk1-8rpm安装包"><a href="#上传jdk1-8rpm安装包" class="headerlink" title="上传jdk1.8rpm安装包"></a>上传jdk1.8rpm安装包</h5><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\jdk-18_linux-x64_bin.rpm root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="执行安装jdk"><a href="#执行安装jdk" class="headerlink" title="执行安装jdk"></a>执行安装jdk</h5><pre class="line-numbers language-none"><code class="language-none">rpm -ivh jdk-8u333-linux-x64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认home路径：&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64</p><h5 id="添加环境变量文件到-x2F-etc-x2F-profile-d-x2F"><a href="#添加环境变量文件到-x2F-etc-x2F-profile-d-x2F" class="headerlink" title="添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;"></a>添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;java.shexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64export CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h4><h5 id="上传Hadoop压缩包"><a href="#上传Hadoop压缩包" class="headerlink" title="上传Hadoop压缩包"></a>上传Hadoop压缩包</h5><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\hadoop-2.10.1.tar.gz root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;usr&#x2F;hadooptar -zxvf hadoop-2.10.1.tar.gz -C &#x2F;usr&#x2F;hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认home路径：&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1</p><h5 id="添加环境变量文件到-x2F-etc-x2F-profile-d-x2F-1"><a href="#添加环境变量文件到-x2F-etc-x2F-profile-d-x2F-1" class="headerlink" title="添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;"></a>添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;hadoop.shexport HADOOP_HOME&#x3D;&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbinsource &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>验证</p><pre class="line-numbers language-none"><code class="language-none">hadoop versionwhereis hdfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="创建HDFS数据目录"><a href="#创建HDFS数据目录" class="headerlink" title="创建HDFS数据目录"></a>创建HDFS数据目录</h5><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;var&#x2F;HDFSdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件位置：&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;</p><p><a href="https://hadoop.apache.org/docs/r2.10.1/hadoop-project-dist/hadoop-common/SingleCluster.html">官方配置说明</a></p><h5 id="为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题"><a href="#为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题" class="headerlink" title="为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题"></a>为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;hadoop-env.sh# The java implementation to use.export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default（rpm安装路径）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="为yarn任务，资源管理器提供Java运行环境"><a href="#为yarn任务，资源管理器提供Java运行环境" class="headerlink" title="为yarn任务，资源管理器提供Java运行环境"></a>为yarn任务，资源管理器提供Java运行环境</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;yarn-env.sh# export JAVA_HOME&#x3D;&#x2F;home&#x2F;y&#x2F;libexec&#x2F;jdk1.6.0&#x2F;if [ &quot;$JAVA_HOME&quot; !&#x3D; &quot;&quot; ]; then  #echo &quot;run java in $JAVA_HOME&quot;  JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default(这一步还是修改Javahome)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Hadoop核心文件配置-指定文件系统"><a href="#Hadoop核心文件配置-指定文件系统" class="headerlink" title="Hadoop核心文件配置(指定文件系统)"></a>Hadoop核心文件配置(指定文件系统)</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;core-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;        &lt;value&gt;hdfs:&#x2F;&#x2F;localhost:9000&lt;&#x2F;value&gt;#修改localhost    &lt;&#x2F;property&gt;    &lt;property&gt;        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;        &lt;value&gt;&#x2F;var&#x2F;HDFSdata&lt;&#x2F;value&gt;#HDFS数据目录    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置hdfs默认的数据存放策略"><a href="#配置hdfs默认的数据存放策略" class="headerlink" title="配置hdfs默认的数据存放策略"></a>配置hdfs默认的数据存放策略</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;        &lt;value&gt;2&lt;&#x2F;value&gt;#hdfs副本数，大于1    &lt;&#x2F;property&gt;    &lt;property&gt;        &lt;name&gt;dfs.namenode.secondary.http-address&lt;&#x2F;name&gt;        &lt;value&gt;node3:50090&lt;&#x2F;value&gt;#指定node3为secondary    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="从模板拷贝mapreduce配置文件，配置任务调度策略"><a href="#从模板拷贝mapreduce配置文件，配置任务调度策略" class="headerlink" title="从模板拷贝mapreduce配置文件，配置任务调度策略"></a>从模板拷贝mapreduce配置文件，配置任务调度策略</h5><pre class="line-numbers language-none"><code class="language-none">cp &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml.template &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xmlvim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt;        &lt;value&gt;yarn&lt;&#x2F;value&gt;    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置yarn资源管理角色"><a href="#配置yarn资源管理角色" class="headerlink" title="配置yarn资源管理角色"></a>配置yarn资源管理角色</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;yarn-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;yarn.nodemanager.aux-services&lt;&#x2F;name&gt;        &lt;value&gt;mapreduce_shuffle&lt;&#x2F;value&gt;#表示结构随机    &lt;&#x2F;property&gt;    &lt;property&gt;        &lt;name&gt;yarn.resourcemanager.hostname&lt;&#x2F;name&gt;        &lt;value&gt;node1&lt;&#x2F;value&gt;#指定资源调度者    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置datanode"><a href="#配置datanode" class="headerlink" title="配置datanode"></a>配置datanode</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;slavesnode1node2node3.....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主节点单独执行"><a href="#主节点单独执行" class="headerlink" title="主节点单独执行"></a>主节点单独执行</h4><h5 id="格式化主节点hdfs"><a href="#格式化主节点hdfs" class="headerlink" title="格式化主节点hdfs"></a>格式化主节点hdfs</h5><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;bin&#x2F;hdfs namenode-formatls &#x2F;var&#x2F;HDFSdata&#x2F;dfs&#x2F;name&#x2F;current&#x2F;#查看imagecd &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;sbin&#x2F;start-dfs.shstart-yarn.sh#启动集群jps#查看<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="访问网址"><a href="#访问网址" class="headerlink" title="访问网址"></a>访问网址</h5><pre class="line-numbers language-none"><code class="language-none">主节点IP:50070#hdfshdfs dfs -mkdir &#x2F;test主节点IP:8088#yarn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop</title>
      <link href="/2022/05/17/Hadoop/"/>
      <url>/2022/05/17/Hadoop/</url>
      
        <content type="html"><![CDATA[<p>Hadoop 是一个开源的分布式计算和存储框架，由 Apache 基金会开发和维护。</p><p>Hadoop 为庞大的计算机集群提供可靠的、可伸缩的应用层计算和存储支持，它允许使用简单的编程模型跨计算机群集分布式处理大型数据集，并且支持在单台计算机到几千台计算机之间进行扩展。</p><p>Hadoop 使用 Java 开发，所以可以在多种不同硬件平台的计算机上部署和使用。其核心部件包括分布式文件系统 (Hadoop DFS，HDFS) 和 MapReduce。</p><h4 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h4><h5 id="确认java安装成功"><a href="#确认java安装成功" class="headerlink" title="确认java安装成功"></a>确认java安装成功</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -versionrpm -qa | grep jdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="卸载其他版本"><a href="#卸载其他版本" class="headerlink" title="卸载其他版本"></a>卸载其他版本</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y remove java...#或者rpm -e --nodeps jdk...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="上传jdk1-8rpm安装包"><a href="#上传jdk1-8rpm安装包" class="headerlink" title="上传jdk1.8rpm安装包"></a>上传jdk1.8rpm安装包</h5><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\jdk-18_linux-x64_bin.rpm root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="执行安装jdk"><a href="#执行安装jdk" class="headerlink" title="执行安装jdk"></a>执行安装jdk</h5><pre class="line-numbers language-none"><code class="language-none">rpm -ivh jdk-8u333-linux-x64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认home路径：&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64</p><h5 id="添加环境变量文件到-x2F-etc-x2F-profile-d-x2F"><a href="#添加环境变量文件到-x2F-etc-x2F-profile-d-x2F" class="headerlink" title="添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;"></a>添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;java.shexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64export CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h4><h5 id="上传Hadoop压缩包"><a href="#上传Hadoop压缩包" class="headerlink" title="上传Hadoop压缩包"></a>上传Hadoop压缩包</h5><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\hadoop-2.10.1.tar.gz root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;usr&#x2F;hadooptar -zxvf hadoop-2.10.1.tar.gz -C &#x2F;usr&#x2F;hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认home路径：&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1</p><h5 id="添加环境变量文件到-x2F-etc-x2F-profile-d-x2F-1"><a href="#添加环境变量文件到-x2F-etc-x2F-profile-d-x2F-1" class="headerlink" title="添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;"></a>添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim &#x2F;etc&#x2F;profile.d&#x2F;hadoop.shexport HADOOP_HOME&#x3D;&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbinsource &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>验证</p><pre class="line-numbers language-none"><code class="language-none">hadoop versionwhereis hdfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="创建HDFS数据目录"><a href="#创建HDFS数据目录" class="headerlink" title="创建HDFS数据目录"></a>创建HDFS数据目录</h5><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;var&#x2F;HDFSdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件位置：&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;</p><p><a href="https://hadoop.apache.org/docs/r2.10.1/hadoop-project-dist/hadoop-common/SingleCluster.html">官方配置说明</a></p><h5 id="为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题"><a href="#为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题" class="headerlink" title="为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题"></a>为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;hadoop-env.sh# The java implementation to use.export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default（rpm安装路径）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="为yarn任务，资源管理器提供Java运行环境"><a href="#为yarn任务，资源管理器提供Java运行环境" class="headerlink" title="为yarn任务，资源管理器提供Java运行环境"></a>为yarn任务，资源管理器提供Java运行环境</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;yarn-env.sh# export JAVA_HOME&#x3D;&#x2F;home&#x2F;y&#x2F;libexec&#x2F;jdk1.6.0&#x2F;if [ &quot;$JAVA_HOME&quot; !&#x3D; &quot;&quot; ]; then  #echo &quot;run java in $JAVA_HOME&quot;  JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default(这一步还是修改Javahome)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Hadoop核心文件配置-指定文件系统"><a href="#Hadoop核心文件配置-指定文件系统" class="headerlink" title="Hadoop核心文件配置(指定文件系统)"></a>Hadoop核心文件配置(指定文件系统)</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;core-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;        &lt;value&gt;hdfs:&#x2F;&#x2F;localhost:9000&lt;&#x2F;value&gt;#修改localhost    &lt;&#x2F;property&gt;    &lt;property&gt;        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;        &lt;value&gt;&#x2F;var&#x2F;HDFSdata&lt;&#x2F;value&gt;#HDFS数据目录    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置hdfs默认的数据存放策略"><a href="#配置hdfs默认的数据存放策略" class="headerlink" title="配置hdfs默认的数据存放策略"></a>配置hdfs默认的数据存放策略</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;        &lt;value&gt;2&lt;&#x2F;value&gt;#hdfs副本数，大于1    &lt;&#x2F;property&gt;    &lt;property&gt;        &lt;name&gt;dfs.namenode.secondary.http-address&lt;&#x2F;name&gt;        &lt;value&gt;node3:50090&lt;&#x2F;value&gt;#指定node3为secondary    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="从模板拷贝mapreduce配置文件，配置任务调度策略"><a href="#从模板拷贝mapreduce配置文件，配置任务调度策略" class="headerlink" title="从模板拷贝mapreduce配置文件，配置任务调度策略"></a>从模板拷贝mapreduce配置文件，配置任务调度策略</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cp &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml.template &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xmlvim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt;        &lt;value&gt;yarn&lt;&#x2F;value&gt;    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置yarn资源管理角色"><a href="#配置yarn资源管理角色" class="headerlink" title="配置yarn资源管理角色"></a>配置yarn资源管理角色</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;yarn-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;yarn.nodemanager.aux-services&lt;&#x2F;name&gt;        &lt;value&gt;mapreduce_shuffle&lt;&#x2F;value&gt;#表示结构随机    &lt;&#x2F;property&gt;    &lt;property&gt;        &lt;name&gt;yarn.resourcemanager.hostname&lt;&#x2F;name&gt;        &lt;value&gt;node1&lt;&#x2F;value&gt;#指定资源调度者    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置datanode"><a href="#配置datanode" class="headerlink" title="配置datanode"></a>配置datanode</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;slavesnode1node2node3.....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主节点单独执行"><a href="#主节点单独执行" class="headerlink" title="主节点单独执行"></a>主节点单独执行</h4><h5 id="格式化主节点hdfs"><a href="#格式化主节点hdfs" class="headerlink" title="格式化主节点hdfs"></a>格式化主节点hdfs</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;bin&#x2F;hdfs namenode-formatls &#x2F;var&#x2F;HDFSdata&#x2F;dfs&#x2F;name&#x2F;current&#x2F;#查看imagecd &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;sbin&#x2F;start-dfs.shstart-yarn.sh#启动集群jps#查看<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="访问网址"><a href="#访问网址" class="headerlink" title="访问网址"></a>访问网址</h5><pre class="line-numbers language-none"><code class="language-none">主节点IP:50070#hdfshdfs dfs -mkdir &#x2F;test主节点IP:8088#yarn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2022/05/16/RabbitMQ/"/>
      <url>/2022/05/16/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<p><strong>分布式消息中间件</strong></p><h3 id="消息队列RabbitMQ安装部署"><a href="#消息队列RabbitMQ安装部署" class="headerlink" title="消息队列RabbitMQ安装部署"></a>消息队列RabbitMQ安装部署</h3><h5 id="添加具有依赖项的存储库"><a href="#添加具有依赖项的存储库" class="headerlink" title="添加具有依赖项的存储库"></a>添加具有依赖项的存储库</h5><pre class="line-numbers language-none"><code class="language-none">yum install epel-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在线安装依赖环境"><a href="#在线安装依赖环境" class="headerlink" title="在线安装依赖环境"></a>在线安装依赖环境</h4><pre class="line-numbers language-none"><code class="language-none">yum install socat build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本机传送文件<code>scp E:\app\Linux\* root@192.168.200.99:/opt</code></p><p>⾸先安装Erlang环境，因为RabbitMQ需要Erlang环境的⽀持，所以必须先安装Erlang。</p><ul><li><h5 id="安装-Erlang-RabbitMQ与Erlang-Versions需要对应"><a href="#安装-Erlang-RabbitMQ与Erlang-Versions需要对应" class="headerlink" title="安装 Erlang(RabbitMQ与Erlang Versions需要对应)"></a>安装 Erlang(RabbitMQ与Erlang Versions需要对应)</h5><p><a href="https://www.rabbitmq.com/which-erlang.html">rabbitmq对照表</a></p><p><a href="https://www.erlang-solutions.com/downloads/">Erlang</a></p><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/">RabbitMQ</a></p></li></ul><pre class="line-numbers language-none"><code class="language-none">rpm -ivh esl-erlang_23.3.4.5-1_centos_7_amd64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试 erlang 是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">erlhalt().<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="安装rabbitmq以及运行和查看状态"><a href="#安装rabbitmq以及运行和查看状态" class="headerlink" title="安装rabbitmq以及运行和查看状态"></a>安装rabbitmq以及运行和查看状态</h4><pre class="line-numbers language-none"><code class="language-none">rpm -ivh rabbitmq-server-3.9.16-1.el7.noarch.rpm（版本需要与erlang对应）&#x2F;sbin&#x2F;service rabbitmq-server start&#x2F;sbin&#x2F;service rabbitmq-server status&#x2F;sbin&#x2F;service rabbitmq-server stopchkconfig rabbitmq-server on#开机自启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="开启管理页面"><a href="#开启管理页面" class="headerlink" title="开启管理页面"></a>开启管理页面</h5><pre class="line-numbers language-none"><code class="language-none">rabbitmq-plugins enable rabbitmq_management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就可以使用linux的ip地址:15672去访问了 用户名密码<code>guest</code>只可以本地访问</p><h5 id="新增用户与权限-主节点执行"><a href="#新增用户与权限-主节点执行" class="headerlink" title="新增用户与权限(主节点执行)"></a>新增用户与权限(主节点执行)</h5><pre class="line-numbers language-none"><code class="language-none">rabbitmqctl add_user admin 654321#添加账号adminrabbitmqctl set_user_tags admin administrator#设置用户角色rabbitmqctl set_permissions -p &#x2F; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;#设置用户权限rabbitmqctl change_password admin 123456#更改密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1. administrator：可以登录控制台查看所有信息，可以对rabbitmq进行管理2. monitoring：监控者，登录控制台，查看所有信息3. policymaker：策略制定者，登录控制台，指定策略4. management：普通管理员，登录控制台<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>hosts与防火墙需要提前设置</p><p>确保各个节点的cookie文件使用的是同一个值(</p><h5 id="主节点执行"><a href="#主节点执行" class="headerlink" title="主节点执行"></a>主节点执行</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scp -p &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie  root@node2:&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookiescp -p &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie  root@node3:&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="杀报错端口进程-从节点执行"><a href="#杀报错端口进程-从节点执行" class="headerlink" title="杀报错端口进程(从节点执行)"></a>杀报错端口进程(从节点执行)</h5><pre class="line-numbers language-none"><code class="language-none">netstat -lnp | grep 25672kill -9 xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="组成集群服务：所有节点执行"><a href="#组成集群服务：所有节点执行" class="headerlink" title="组成集群服务：所有节点执行"></a>组成集群服务：所有节点执行</h5><pre class="line-numbers language-none"><code class="language-none">rabbitmq-server -detached<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="从节点执行-加入集群"><a href="#从节点执行-加入集群" class="headerlink" title="从节点执行(加入集群)"></a>从节点执行(加入集群)</h5><pre class="line-numbers language-none"><code class="language-none">rabbitmqctl stop_app#停止MQ服务rabbitmqctl reset#重置MQrabbitmqctl join_cluster rabbit@node1#加入主节点rabbitmqctl start_app#只启动应用服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h5><pre class="line-numbers language-none"><code class="language-none">rabbitmqctl cluster_status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="集群移除从节点："><a href="#集群移除从节点：" class="headerlink" title="集群移除从节点："></a>集群移除从节点：</h4><ol><li>&#96;&#96;&#96;<br>停止从节点服务并重置<br>rabbitmqctl stop_app<br>rabbitmqctl reset<pre class="line-numbers language-none"><code class="language-none">2. &#96;&#96;&#96;   主节点上移除从节   rabbitmqctl forget_cluster_node rabbit@主机名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>配置文件位置</p><p>&#x2F;usr&#x2F;lib&#x2F;rabbitmq&#x2F;lib&#x2F;rabbitmq_server-3.9.16&#x2F;sbin</p><p>&#x2F;etc&#x2F;rabbitmq&#x2F;rabbitmq.conf</p><p>cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;rabbitmq-server-3.9.16&#x2F;</p><p>日志文件cat &#x2F;var&#x2F;log&#x2F;rabbitmq&#x2F;<a href="mailto:&#x72;&#97;&#98;&#x62;&#x69;&#x74;&#64;&#x6e;&#x6f;&#100;&#101;&#x30;&#x33;&#46;&#x6c;&#x6f;&#x67;">&#x72;&#97;&#98;&#x62;&#x69;&#x74;&#64;&#x6e;&#x6f;&#100;&#101;&#x30;&#x33;&#46;&#x6c;&#x6f;&#x67;</a></p><p>rabbitmq 诊断状态命令：rabbitmq-diagnostics status</p><p>要检查特定节点的位置，包括远程运行的节点，请使用 -n（–node 的缩写）开关：</p><p>rabbitmq-diagnostics status -n [node name]</p><pre class="line-numbers language-none"><code class="language-none">Config files * &#x2F;etc&#x2F;rabbitmq&#x2F;advanced.config * &#x2F;etc&#x2F;rabbitmq&#x2F;rabbitmq.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu基础环境</title>
      <link href="/2022/05/15/ubuntu18.04/"/>
      <url>/2022/05/15/ubuntu18.04/</url>
      
        <content type="html"><![CDATA[<p>开启root账号</p><pre class="line-numbers language-none"><code class="language-none">sudo passwd root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1，ssh*<br>使本机开放SSH服务安装openssh-server：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后确认sshserver是否启动了：</p><pre class="line-numbers language-none"><code class="language-none">ps -e |grep ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2，向日葵</p><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl-cdn.oray.com&#x2F;sunlogin&#x2F;linux&#x2F;sunloginclientshell-10.1.1.28779-amd64.debsudo dpkg -i 文件名.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>vlc，macast，mpv，向日葵，洛雪，Alarm clock，网易云音乐，ssh</p><p>重启：sudo reboot</p>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2022/05/14/Nginx/"/>
      <url>/2022/05/14/Nginx/</url>
      
        <content type="html"><![CDATA[<p>负载均衡中间件 反向代理</p><p>上传Nginx源码包到服务器</p><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\nginx-1.21.6.tar.gz root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><pre class="line-numbers language-none"><code class="language-none">tar zxvf &#x2F;opt&#x2F;nginx-1.21.6.tar.gz -C &#x2F;usr&#x2F;local&#x2F;src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><pre class="line-numbers language-none"><code class="language-none">yum -y install pcre-devel libtool openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx-1.21.6.&#x2F;configuremake &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​安装完成后， Nginx的可执⾏⽂件位置位于&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx<br>​启动NGINX<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx<br>​停⽌Nginx服务<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop<br>​重新加载Nginx<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload<br>​配置⽂件位于&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim &#x2F;etc&#x2F;init.d&#x2F;nginx#!&#x2F;bin&#x2F;sh## nginx - this script starts and stops the nginx daemon## chkconfig:   - 85 15# description:  NGINX is an HTTP(S) server, HTTP(S) reverse \#               proxy and IMAP&#x2F;POP3 proxy server# processname: nginx# config:      &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf# config:      &#x2F;etc&#x2F;sysconfig&#x2F;nginx# pidfile:     &#x2F;var&#x2F;run&#x2F;nginx.pid# Source function library.. &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;functions# Source networking configuration.. &#x2F;etc&#x2F;sysconfig&#x2F;network# Check that networking is up.[ &quot;$NETWORKING&quot; &#x3D; &quot;no&quot; ] &amp;&amp; exit 0nginx&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx&quot;prog&#x3D;$(basename $nginx)NGINX_CONF_FILE&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf&quot;[ -f &#x2F;etc&#x2F;sysconfig&#x2F;nginx ] &amp;&amp; . &#x2F;etc&#x2F;sysconfig&#x2F;nginxlockfile&#x3D;&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;nginxmake_dirs() &#123;   # make required directories   user&#x3D;&#96;$nginx -V 2&gt;&amp;1 | grep &quot;configure arguments:.*--user&#x3D;&quot; | sed &#39;s&#x2F;[^*]*--user&#x3D;\([^ ]*\).*&#x2F;\1&#x2F;g&#39; -&#96;   if [ -n &quot;$user&quot; ]; then      if [ -z &quot;&#96;grep $user &#x2F;etc&#x2F;passwd&#96;&quot; ]; then         useradd -M -s &#x2F;bin&#x2F;nologin $user      fi      options&#x3D;&#96;$nginx -V 2&gt;&amp;1 | grep &#39;configure arguments:&#39;&#96;      for opt in $options; do          if [ &#96;echo $opt | grep &#39;.*-temp-path&#39;&#96; ]; then              value&#x3D;&#96;echo $opt | cut -d &quot;&#x3D;&quot; -f 2&#96;              if [ ! -d &quot;$value&quot; ]; then                  # echo &quot;creating&quot; $value                  mkdir -p $value &amp;&amp; chown -R $user $value              fi          fi       done    fi&#125;start() &#123;    [ -x $nginx ] || exit 5    [ -f $NGINX_CONF_FILE ] || exit 6    make_dirs    echo -n $&quot;Starting $prog: &quot;    daemon $nginx -c $NGINX_CONF_FILE    retval&#x3D;$?    echo    [ $retval -eq 0 ] &amp;&amp; touch $lockfile    return $retval&#125;stop() &#123;    echo -n $&quot;Stopping $prog: &quot;    killproc $prog -QUIT    retval&#x3D;$?    echo    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile    return $retval&#125;restart() &#123;    configtest || return $?    stop    sleep 1    start&#125;reload() &#123;    configtest || return $?    echo -n $&quot;Reloading $prog: &quot;    killproc $prog -HUP    retval&#x3D;$?    echo&#125;force_reload() &#123;    restart&#125;configtest() &#123;  $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123;    status $prog&#125;rh_status_q() &#123;    rh_status &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&#125;case &quot;$1&quot; in    start)        rh_status_q &amp;&amp; exit 0        $1        ;;    stop)        rh_status_q || exit 0        $1        ;;    restart|configtest)        $1        ;;    reload)        rh_status_q || exit 7        $1        ;;    force-reload)        force_reload        ;;    status)        rh_status        ;;    condrestart|try-restart)        rh_status_q || exit 0            ;;    *)        echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;        exit 2esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chmod +x &#x2F;etc&#x2F;init.d&#x2F;nginxchkconfig --add nginxchkconfig nginx onservice nginx startservice nginx status...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepin基础环境搭建</title>
      <link href="/2022/05/13/deepin/"/>
      <url>/2022/05/13/deepin/</url>
      
        <content type="html"><![CDATA[<p>安装ssh</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install openssh-serversudo &#x2F;etc&#x2F;init.d&#x2F;ssh start#启动ssh服务sudo systemctl enable ssh#设置开机自启动sudo systemctl disable ssh#关闭ssh开机自动启动命令sudo systemctl start ssh#单次开启sshsudo systemctl stop ssh#单次关闭ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装vnc</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install x11vncx11vnc -storepasswd#初始化密码Write password to &#x2F;home&#x2F;kqgeo&#x2F;.vnc&#x2F;passwd?#提示密码存储位置x11vnc -forever -shared -rfbauth &#x2F;home&#x2F;kqgeo&#x2F;.vnc&#x2F;passwdx11vnc#启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> deepin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>x11vnc</title>
      <link href="/2022/05/12/centos7_x11vnc/"/>
      <url>/2022/05/12/centos7_x11vnc/</url>
      
        <content type="html"><![CDATA[<p><strong>在线安装</strong></p><pre class="line-numbers language-none"><code class="language-none">yum install epel-release#添加源epel.repoyum install -y x11vnc#安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><pre class="line-numbers language-none"><code class="language-none">x11vnc -storepasswdmv ~&#x2F;.vnc&#x2F;passwd &#x2F;root&#x2F;.vnc&#x2F;x11vnc.pwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;x11vnc.service[Unit]Description&#x3D;Remote desktop service (VNC)Requires&#x3D;display-manager.serviceAfter&#x3D;display-manager.service[Service]Type&#x3D;forkingExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;x11vnc -display :0 -forever -shared -bg -rfbauth &#x2F;root&#x2F;.vnc&#x2F;x11vnc.pwd -o &#x2F;var&#x2F;log&#x2F;x11vnc.logExecStop&#x3D;&#x2F;usr&#x2F;bin&#x2F;killall x11vncRestart&#x3D;on-failureRestartSec&#x3D;5[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动开机服务服务"><a href="#启动开机服务服务" class="headerlink" title="启动开机服务服务"></a>启动开机服务服务</h4><pre class="line-numbers language-none"><code class="language-none">systemctl daemon-reloadsystemctl enable x11vnc.servicesystemctl start x11vnc.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="关防火墙"><a href="#关防火墙" class="headerlink" title="关防火墙"></a>关防火墙</h4><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld.servicesystemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre class="line-numbers language-none"><code class="language-none">vncserver -list#查看当前用户开了多少个vncserverps -ef |grep vnc#查看其他用户vncserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> vnc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp</title>
      <link href="/2022/05/11/centos7_frp/"/>
      <url>/2022/05/11/centos7_frp/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/fatedier/frp/releases/">frp官网</a></p><p> 我的阿里云IP<code>39.106.67.52</code></p><p> 上传frp压缩包</p><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\frp_0.43.0_linux_amd64.tar.gz root@39.106.67.52:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><pre class="line-numbers language-none"><code class="language-none">tar -zxvf &#x2F;opt&#x2F;frp_0.43.0_linux_amd64.tar.gz -C &#x2F;usr&#x2F;mv &#x2F;usr&#x2F;frp_0.43.0_linux_amd64 &#x2F;usr&#x2F;frp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;frp&#x2F;frps.ini[common]bind_port &#x3D; 7000dashboard_port &#x3D; 7500dashboard_user &#x3D; 后台用户名dashboard_pwd &#x3D; 后台密码vhost_http_port &#x3D; 81vhost_https_port &#x3D; 444token &#x3D; 明文连接密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;frp&#x2F;frps -c &#x2F;usr&#x2F;frp&#x2F;frps.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;frp&#x2F;frpc.ini[common]server_addr &#x3D; 39.106.67.52server_port &#x3D; 7000token &#x3D; kqgeo[ssh]type &#x3D; tcpprivilege_mode &#x3D; truelocal_ip &#x3D; 127.0.0.1local_port &#x3D; 22remote_port &#x3D; 6000[vnc]type &#x3D; tcplocal_ip &#x3D; 127.0.0.1#可以输入同局域网中的其他主机IP，起到转接的功能local_port &#x3D; 5900remote_port &#x3D; 52590<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端启动</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;frp&#x2F;.&#x2F;frpc -c .&#x2F;frpc.ini &amp;#Linux.\frpc.exe -c.\frpc.ini#win<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><p>服务端s，客户端c(注意c与s区别)</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;frps.service[Unit]Description&#x3D;Frp Server ServiceAfter&#x3D;network.target[Service]Type&#x3D;simpleUser&#x3D;rootRestart&#x3D;on-failureRestartSec&#x3D;5sExecStart&#x3D;&#x2F;usr&#x2F;frp&#x2F;frps -c &#x2F;usr&#x2F;frp&#x2F;frps.iniLimitNOFILE&#x3D;1048576[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl start frps.service#启动测试systemctl status frps.service#查看启动状态systemctl enable frps.service#开机自启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arch安装</title>
      <link href="/2022/05/10/arch_pacman/"/>
      <url>/2022/05/10/arch_pacman/</url>
      
        <content type="html"><![CDATA[<p>光盘引导，特殊情况需要固定IP</p><h4 id="引导界面操作"><a href="#引导界面操作" class="headerlink" title="引导界面操作"></a>引导界面操作</h4><pre class="line-numbers language-none"><code class="language-none">ip addr change 192.168.200.94&#x2F;24 dev ens192#固定IPip route add default via 192.168.200.254#设置网关<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果可以ping通网关,然后登不上网页的话就是dns的问题，</p><p>在&#x2F;etc&#x2F;resolv.conf里面加一行nameserver 8.8.8.8</p><pre class="line-numbers language-none"><code class="language-none">passwd#设个密码远程timedatectl set-ntp true#同步时间pacman -Syy#更新镜像源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>磁盘分区</p><pre class="line-numbers language-none"><code class="language-none">fdisk -lfdisk &#x2F;dev&#x2F;sda#查看磁盘n#新建，一直回车保持默认p#查看w#保存mkfs.ext4 &#x2F;dev&#x2F;sda1#格式化分区mount &#x2F;dev&#x2F;sda1 &#x2F;mnt#挂载分区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择镜像源</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlistj和k上下移动光标dd剪切当前行yy复制一行p粘贴到光标位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者直接添加如下配置</p><pre class="line-numbers language-none"><code class="language-none">## ChinaServer &#x3D; https:&#x2F;&#x2F;mirrors.bfsu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.cqu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.dgut.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.neusoft.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.nju.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirror.redrock.team&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.sjtug.sjtu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.xjtu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装基本Linux包</p><pre class="line-numbers language-none"><code class="language-none">pacetrap &#x2F;mnt base base-devel linux linux-firmware dhcpcdgenfstab -L &#x2F;mnt &gt;&gt; &#x2F;mnt&#x2F;etc&#x2F;fstabcat &#x2F;mnt&#x2F;etc&#x2F;fstabarch-chroot &#x2F;mntln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtimehwclock --systohcpacman -S vim dialog wpa_supplicant ntfs-3g networkmanager netctl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改语言</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;locale.gen命令行模式输入:&#x2F;zh查找x删除激活这4个zh_CN.UTF-8 UTF-8zh_HK.UTF-8 UTF-8zh_TW.UTF-8 UTF-8en_US.UTF-8 UTF-8执行locale-gen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;locale.confLANG&#x3D;en_US.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;hostnamevim &#x2F;etc&#x2F;hosts127.0.0.1localhost::1localhost127.0.1.1yi.localdomain yi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打补丁</p><pre class="line-numbers language-none"><code class="language-none">pacman -S intel-ucode#intelCPU补丁pacman -S os-prober ntfs-3gpacman -S grubgrub-install --target&#x3D;i386-pc &#x2F;dev&#x2F;sda1grub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>vim &#x2F;boot&#x2F;grub&#x2F;grub.cfg</p><p>exit</p><p>umount &#x2F;mnt</p><p>reboot</p><h4 id="硬盘启动"><a href="#硬盘启动" class="headerlink" title="硬盘启动"></a>硬盘启动</h4><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;swapfile bs&#x3D;1M count&#x3D;512 status&#x3D;progress</p><p>chmod 600 &#x2F;swapfile</p><p>mkswap &#x2F;swapfile</p><p>swapon &#x2F;swapfile</p><p>vim &#x2F;etc&#x2F;fstab</p><p>最下面插入一行</p><p>&#x2F;swapfile none swap defaults 0 0</p><p>新建普通用户</p><p>useradd -m -G wheel yi</p><p>passwd yi</p><p>pacman -S sudo</p><p>ln -s &#x2F;usr&#x2F;bin&#x2F;vim &#x2F;usr&#x2F;bin&#x2F;vi</p><p>visudo</p><p>注释掉# %wheel ALL&#x3D;(ALL)ALL</p><p>切换到yi用户</p><p>su yi</p><p>sudo vim &#x2F;etc&#x2F;pacman.conf</p><p>注释掉multilib并在下方加入</p><p>[archlinuxcn]</p><p>Server &#x3D; <a href="https://repo.archlinuxcn.org/$arch">https://repo.archlinuxcn.org/$arch</a></p><p>sudo pacman -Syy更新源</p><p>sudo pacman -S archlinuxcn-keyring</p><p>sudo pacman -S  xf86-video-intel mesaintel核显用户</p><p>sudo pacman -S xorg plasma kde-applications sddm network-manager-applet</p><p>sudo systemctl enable sddm</p><p>sudo systemctl disable netctl</p><p>sudo systemctl enable NteworkManager</p><p>reboot</p><p>终端操作</p><p>安装vmtools。。。</p><pre class="line-numbers language-none"><code class="language-none">root下依次执行下面命令for x in &#123;0..6&#125;; do mkdir -p &#x2F;etc&#x2F;init.d&#x2F;rc$&#123;x&#125;.d; donemount &#x2F;dev&#x2F;cdrom &#x2F;mnttar xf &#x2F;mnt&#x2F;VMwareTools*.tar.gz -C &#x2F;rootperl &#x2F;root&#x2F;vmware-tools-distrib&#x2F;vmware-install.pl创建文件&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vmwaretools.servicevim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vmwaretools.service[Unit] Description&#x3D;VMWare Tools daemon [Service] ExecStart&#x3D;&#x2F;etc&#x2F;init.d&#x2F;vmware-tools start ExecStop&#x3D;&#x2F;etc&#x2F;init.d&#x2F;vmware-tools stop PIDFile&#x3D;&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;vmware TimeoutSec&#x3D;0 RemainAfterExit&#x3D;yes [Install] WantedBy&#x3D;multi-user.target设置开机启动systemctl enable vmwaretools.serviceXorg设置pacman -S xf86-input-vmmouse xf86-video-vmware mesavim &#x2F;etc&#x2F;X11&#x2F;Xwrapper.configneeds_root_rights&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装ssh并开机自启</p><pre class="line-numbers language-none"><code class="language-none">sudo pacman -S wqy-microhei wqy-microhei-lite wqy-bitmapfont wqy-zenhei ttf-arphic-ukai ttf-arphic-uming adobe-source-han-sans-cn-fonts noto-fonts-cjk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装非官方源</p><p>sudo pacman -S git</p><p>git clone <a href="https://aur.archlinux.org/yay.git">https://aur.archlinux.org/yay.git</a></p><p>cd yay</p><p>makepkg -si</p><p>sudo vim &#x2F;etc&#x2F;locale.conf</p><p>LANG&#x3D;zh_CN.UTF-8</p>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crontab</title>
      <link href="/2022/05/09/crontab/"/>
      <url>/2022/05/09/crontab/</url>
      
        <content type="html"><![CDATA[<p>cron服务是Linux的内置服务，但它不会开机自动启动。可以用以下命令启动和停止服务：<br>&#x2F;sbin&#x2F;service crond start<br>&#x2F;sbin&#x2F;service crond stop<br>&#x2F;sbin&#x2F;service crond restart<br>&#x2F;sbin&#x2F;service crond reload<br>以上1-4行分别为启动、停止、重启服务和重新加载配置。</p><p>要把cron设为在开机的时候自动启动，在 &#x2F;etc&#x2F;rc.d&#x2F;rc.local 脚本中加入 &#x2F;sbin&#x2F;service crond start 即可</p><p>查看当前用户的crontab，输入 crontab -l<br>编辑crontab，输入 crontab -e<br>删除crontab，输入 crontab -r</p><p>00 12 * * 1 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;雾.mp3<br>00 12 * * 2 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;雾.mp3<br>00 12 * * 3 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;雾.mp3<br>00 12 * * 4 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;雾.mp3<br>00 12 * * 5 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;雾.mp3<br>30 13 * * 1 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;1_The\ Rain.mp3<br>30 13 * * 2 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;2_城南花已开.mp3<br>30 13 * * 3 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;3_いつも何度でも.mp3<br>30 13 * * 4 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;4_Sentient.mp3<br>30 13 * * 5 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;5_勿念他归.mp3</p>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 自动任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos彻底卸载软件</title>
      <link href="/2022/05/08/centos_remove/"/>
      <url>/2022/05/08/centos_remove/</url>
      
        <content type="html"><![CDATA[<p>停服务</p><pre class="line-numbers language-none"><code class="language-none">service xx-server stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卸组件</p><pre class="line-numbers language-none"><code class="language-none">yum list | grep xxyum -y remove<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要删除的数据目录</p><pre class="line-numbers language-none"><code class="language-none">find &#x2F; elasticsearch | grep elasticsearc#例如搜索根目录下的所有elasrm -rf &#x2F;var&#x2F;lib&#x2F;xx&#x2F;*rm -rf &#x2F;etc&#x2F;xx&#x2F;*rm -rf &#x2F;usr&#x2F;lib&#x2F;xx&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>完全卸载mariadb</p><pre class="line-numbers language-none"><code class="language-none">rpm -qa|grep mariadbyum -y remove mariadbrm -rf &#x2F;etc&#x2F;my.cnf*rm -rf &#x2F;var&#x2F;lib&#x2F;mysql*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible</title>
      <link href="/2022/05/07/ansible/"/>
      <url>/2022/05/07/ansible/</url>
      
        <content type="html"><![CDATA[<h3 id="构建密钥对验证的SSH体系"><a href="#构建密钥对验证的SSH体系" class="headerlink" title="构建密钥对验证的SSH体系"></a>构建密钥对验证的SSH体系</h3><p>整个过程包括四步</p><p>首先要在SSH客户端以greg用户身份创建密钥对，</p><p>并且要将创建的公钥文件上传至SSH服务器端，</p><p>然后要将公钥信息导入服务器端的目标用户root的公钥数据库，</p><p>最后以服务器端用户root的身份登录验证。</p><h4 id="1、在客户端创建密钥对"><a href="#1、在客户端创建密钥对" class="headerlink" title="1、在客户端创建密钥对"></a>1、在客户端创建密钥对</h4><p>在客户端中，通过ssh-keygen工具为当前用户创建密钥对文件。</p><p>可用的加密算法为ECDSA、DSA或RSA（ssh-keygen命令的“-t”选项用于指定算法类型）。</p><p><code>ssh-keygen -t rsa</code><!--创建密钥对-->全部保持默认</p><p>ls -lh ~&#x2F;.ssh&#x2F;id_rsa*<!--确认生成的密钥文件--></p><p>id_rsa是私钥文件，权限默认为600</p><p>id_rsa.pub是公钥文件，用来提供给ssh服务器。</p><h4 id="2、将公钥文件上传至服务器"><a href="#2、将公钥文件上传至服务器" class="headerlink" title="2、将公钥文件上传至服务器"></a>2、将公钥文件上传至服务器</h4><p>将上一步生成的公钥文件上传至服务器，并部署到服务器端用户的公钥数据库中。上传公钥文件时可以选择SCP、FTP、HTTP甚至发送E-mail等任何方式。</p><p><code>ssh-copy-id -i ./.ssh/id_rsa.pub root@192.168.200.99</code><!--将公钥文件上传至服务器并导入公钥文本--></p><p>yes输入<a href="mailto:&#114;&#111;&#x6f;&#116;&#x40;&#49;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#50;&#x30;&#x30;&#x2e;&#x39;&#57;">&#114;&#111;&#x6f;&#116;&#x40;&#49;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#50;&#x30;&#x30;&#x2e;&#x39;&#57;</a>密码</p><h4 id="3、在客户端使用密钥对验证"><a href="#3、在客户端使用密钥对验证" class="headerlink" title="3、在客户端使用密钥对验证"></a>3、在客户端使用密钥对验证</h4><p>当私钥文件（客户端）、公钥文件（服务器）均部署到位以后，就可以在客户端中进行测试了。</p><p><code>ssh root@192.168.200.99</code></p><h3 id="安装ansible"><a href="#安装ansible" class="headerlink" title="安装ansible"></a>安装ansible</h3><p>使用yum安装</p><p><code>yum install epel-release -y</code><!--先安装源--></p><p><code>yum install ansible –y</code></p><p><code>ansible --version</code><!--验证--></p><h3 id="Ansible配置"><a href="#Ansible配置" class="headerlink" title="Ansible配置"></a>Ansible配置</h3><p>Inventory是Ansible管理主机信息的配置文件，相当于系统Hosts文件的功能，默认存放在&#x2F;etc&#x2F;ansible&#x2F;hosts。在hosts文件中，通过分组来组织设备，Ansible通过Inventory来定义主机和分组，通过在ansible命令中使用选项-i或–inventory-file来指定Inventory。</p><p><code>ansible -i /etc/ansible/hosts web -m ping</code></p><p>如果使用默认的Inventory文件（&#x2F;etc&#x2F;ansible&#x2F;hosts），也可以不指定Inventory文件，例如：</p><p><code>ansible web -m ping</code></p><p>Ansible通过设备列表以分组的方式添加到&#x2F;etc&#x2F;ansible&#x2F;hosts文件来实现对设备的管理，所以在正式管理之前，首先要编写好hosts文件。hosts文件中，以[ ]包含的部分代表组名，设备列表支持主机名和IP地址。默认情况下，通过访问22端口（SSH）来管理设备。若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口标明，以行为单位分隔配置。另外，hosts文件还支持通配符。</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;ansible&#x2F;hosts[web]192.168.200.98192.168.200.97[test]node04:22                         &lt;!--通过22端口管理设备--&gt;[mail]yj1.kgc.cnyj[2:5].kgc.cn&lt;!--[2:5]表示2~5之间的所有数字，即表示yj2.kgc.cn、yj3.kgc.cn……的所有主机--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件</p><p>&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg</p>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 红帽认证 </tag>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2022/05/06/centos7_install_java/"/>
      <url>/2022/05/06/centos7_install_java/</url>
      
        <content type="html"><![CDATA[<p>监测java是否存在</p><pre class="line-numbers language-none"><code class="language-none">java -versionrpm -qa | grep jdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>卸载</p><pre class="line-numbers language-none"><code class="language-none">rpm -e --nodeps jdk...yum -y remove java...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h3><p><code>rpm -ivh jdk-8u333-linux-x64.rpm</code></p><h3 id="解压缩安装"><a href="#解压缩安装" class="headerlink" title="解压缩安装"></a>解压缩安装</h3><p><code>tar -zxvf  jdk-8u333-linux-x64.tar.gz</code> <code>vim /etc/profile</code></p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1....export CLASSPATH&#x3D;%JAVA_HOME%&#x2F;lib;%JAVA_HOME%&#x2F;jre&#x2F;lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>source /etc/profile</code></p><h3 id="yum在线安装"><a href="#yum在线安装" class="headerlink" title="yum在线安装"></a>yum在线安装</h3><p><code>yum list java-1.8*</code></p><p><code>yum install java-1.8.0-openjdk* -y</code>ji</p><p>默认路径：&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64&#x2F;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker_RabbitMQ</title>
      <link href="/2022/05/05/Docker_RabbitMQ/"/>
      <url>/2022/05/05/Docker_RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>安装软件包（提供实用程序）并设置<strong>稳定的</strong>存储库。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install -y yum-utils$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><ol><li><p>安装<em>最新版本</em>的 Docker 引擎、容器和 Docker Compose，或转到下一步以安装特定版本：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 Docker。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过运行映像来验证 Docker 引擎是否已正确安装。<code>hello-world</code></p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。</p></li></ol><h4 id="卸载-Docker-引擎"><a href="#卸载-Docker-引擎" class="headerlink" title="卸载 Docker 引擎"></a>卸载 Docker 引擎</h4><ol><li><p>卸载 Docker 引擎、CLI、Containerd 和 Docker Compose 包：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum remove docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有映像、容器和卷：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p><del>创建工作目录</del></p><p><code>mkdir ~/.RabbitMQ &amp;&amp; cd ~/.RabbitMQ</code></p><pre class="line-numbers language-none"><code class="language-none">mkdir -p ~&#x2F;.rabbitmq&#x2F;&#123;etc,lib,var&#x2F;&#123;lib,log&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="拉取最新docker镜像，"><a href="#拉取最新docker镜像，" class="headerlink" title="拉取最新docker镜像，"></a>拉取最新docker镜像，</h4><pre class="line-numbers language-none"><code class="language-none">docker pull rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看端口是否被占用，</p><pre class="line-numbers language-none"><code class="language-none">yum install lsoflsof -i:15672<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建容器</p><pre class="line-numbers language-none"><code class="language-none">docker run -di --name myrabbit -e RABBITMQ_DEFAULT_USER&#x3D;admin -e RABBITMQ_DEFAULT_PASS&#x3D;admin -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">-di：创建一个守护式容器–name：为容器指定一个名称-e：添加环境变量-p：端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置。-v： 工作目录映射。形式为：-v 宿主机路径:&#x2F;root&#x2F;.halo，后者不能修改。–unless-stoppedt： 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>停止并删除当前运行中的容器</li></ul><p><code>docker stop myrabbit</code></p><p><code>docker ps -a</code></p><p><code>docker rm -f myrabbit</code></p><p><code>rm -rf ~/.myrabbit</code>     # 完全删除映射到本地的数据</p><ul><li>备份数据</li></ul><p><code>cp -r ~/.myrabbit ~/.myrabbit.backup</code></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker_Nginx</title>
      <link href="/2022/05/04/Docker_Nginx/"/>
      <url>/2022/05/04/Docker_Nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>安装软件包（提供实用程序）并设置<strong>稳定的</strong>存储库。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install -y yum-utils$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><ol><li><p>安装<em>最新版本</em>的 Docker 引擎、容器和 Docker Compose，或转到下一步以安装特定版本：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 Docker。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过运行映像来验证 Docker 引擎是否已正确安装。<code>hello-world</code></p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。</p></li></ol><h4 id="卸载-Docker-引擎"><a href="#卸载-Docker-引擎" class="headerlink" title="卸载 Docker 引擎"></a>卸载 Docker 引擎</h4><ol><li><p>卸载 Docker 引擎、CLI、Containerd 和 Docker Compose 包：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum remove docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有映像、容器和卷：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>创建工作目录</p><p><code>mkdir ~/.Nginx &amp;&amp; cd ~/.Nginx</code></p><p>安装 Docker Compose。</p><pre class="line-numbers language-none"><code class="language-none">curl -L https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.5.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composechmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个docker-compose.yml文件</p><pre class="line-numbers language-none"><code class="language-none">version: &#39;3&#39;services:  app:    image: &#39;chishin&#x2F;nginx-proxy-manager-zh:latest&#39;    restart: always    ports:      - &#39;80:80&#39;      - &#39;81:81&#39;      - &#39;443:443&#39;    volumes:      - .&#x2F;data:&#x2F;data      - .&#x2F;letsencrypt:&#x2F;etc&#x2F;letsencrypt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署运行</p><p><code>docker-compose up -d</code></p><p>默认管理员信息</p><pre class="line-numbers language-none"><code class="language-none">Email:    admin@example.comPassword: changeme<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>快速升级</p><pre class="line-numbers language-none"><code class="language-none">docker-compose downdocker-compose pulldocker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>docker pull chishin/nginx-proxy-manager-zh</code></p><p><code>docker stop NPMz</code></p><p><code>docker rm -f NPMz</code></p><ul><li>备份数据</li></ul><p><code>cp -r ~/.Nginx ~/.Nginx.backup</code></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker_hexo</title>
      <link href="/2022/05/03/Docker_hexo/"/>
      <url>/2022/05/03/Docker_hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>安装软件包（提供实用程序）并设置<strong>稳定的</strong>存储库。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install -y yum-utils$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><ol><li><p>安装<em>最新版本</em>的 Docker 引擎、容器和 Docker Compose，或转到下一步以安装特定版本：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 Docker。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过运行映像来验证 Docker 引擎是否已正确安装。<code>hello-world</code></p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。</p></li></ol><h4 id="卸载-Docker-引擎"><a href="#卸载-Docker-引擎" class="headerlink" title="卸载 Docker 引擎"></a>卸载 Docker 引擎</h4><ol><li><p>卸载 Docker 引擎、CLI、Containerd 和 Docker Compose 包：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum remove docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有映像、容器和卷：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>创建工作目录</p><p><code>mkdir ~/.hexo &amp;&amp; cd ~/.hexo</code></p><p>安装 Docker Compose。</p><pre class="line-numbers language-none"><code class="language-none">curl -L https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.5.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composechmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个docker-compose.yml文件</p><p><code>touch Dockerfile</code></p><pre class="line-numbers language-none"><code class="language-none"># node环境镜像FROM node:latest AS build-env# 创建hexo-blog文件夹且设置成工作文件夹RUN mkdir -p &#x2F;usr&#x2F;src&#x2F;hexo-blogWORKDIR &#x2F;usr&#x2F;src&#x2F;hexo-blog# 复制当前文件夹下面的所有文件到hexo-blog中COPY . .# 安装 hexo-cliRUN npm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org install hexo-cli -g &amp;&amp; npm install# 生成静态文件RUN hexo clean &amp;&amp; hexo g# 配置nginxFROM nginx:latestENV TZ&#x3D;Asia&#x2F;ShanghaiRUN ln -snf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;$TZ &#x2F;etc&#x2F;localtime &amp;&amp; echo $TZ &gt; &#x2F;etc&#x2F;timezoneWORKDIR &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html# 把上一部生成的HTML文件复制到Nginx中COPY --from&#x3D;build-env &#x2F;usr&#x2F;src&#x2F;hexo-blog&#x2F;public &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;htmlEXPOSE 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker_halo</title>
      <link href="/2022/05/02/Docker_halo/"/>
      <url>/2022/05/02/Docker_halo/</url>
      
        <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>安装软件包（提供实用程序）并设置<strong>稳定的</strong>存储库。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install -y yum-utils$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><ol><li><p>安装<em>最新版本</em>的 Docker 引擎、容器和 Docker Compose，或转到下一步以安装特定版本：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 Docker。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过运行映像来验证 Docker 引擎是否已正确安装。<code>hello-world</code></p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。</p></li></ol><h4 id="卸载-Docker-引擎"><a href="#卸载-Docker-引擎" class="headerlink" title="卸载 Docker 引擎"></a>卸载 Docker 引擎</h4><ol><li><p>卸载 Docker 引擎、CLI、Containerd 和 Docker Compose 包：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum remove docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有映像、容器和卷：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>创建工作目录</p><p><code>mkdir ~/.halo &amp;&amp; cd ~/.halo</code></p><h4 id="自动"><a href="#自动" class="headerlink" title="自动"></a>自动</h4><p>下载示例配置文件到 工作目录</p><p><code>yum -y install wget</code></p><p><code>wget https://dl.halo.run/config/application-template.yaml -O ./application.yaml</code></p><h4 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h4><p>Halo 的配置文件名为 application.yaml，其必须位于工作目录 ~&#x2F;.halo 下。 Halo 会读取该目录下的配置文件进行加载。</p><p>如果您是单独下载的官方配置文件，则必须将文件名 application-template.yaml 重命名为 application.yaml</p><p>编辑配置文件，配置数据库或者端口等，</p><p><code>yum -y install vim</code></p><p><code>vim application.yaml</code></p><ul><li>默认的数据库账户和密码为 <code>admin</code> 和 <code>123456</code>，建议将其修改，并妥善保存（此用户名和密码在 Halo 第一次启动的时候将自动创建。并且不支持首次启动后，通过修改配置文件中的账户或者密码，如果修改，再次启动将提示用户名或者密码错误。）。</li><li>线上环境中，<code>h2</code> 的配置使用默认即可。如果需要手动修改一些数据，可将 <code>web-allow-others</code> 和 <code>enabled</code> 设为 <code>true</code> 来开启 h2 控制台，访问路径为 <code>ip:端口/h2-console</code>。<code>JDBC URL</code>，<code>username</code>，<code>password</code> 使用配置文件中的即可。</li><li>特别注意：在开启 <code>h2-console</code> 并完成所需操作之后，一定要再次关闭 <code>h2-console</code> 并重启，不要长时间将 <code>h2-console</code> 处于开启状态，这可能会有隐性的安全风险。</li></ul><p>mysql要求</p><ol><li>版本：5.7 +</li><li>字符集（Character Set）：<code>utf8mb4</code></li><li>排序规则（Collate）：<code>utf8mb4_bin</code></li><li>存储引擎：<code>InnoDB</code></li></ol><p>综上，建议创建数据库采用下面的命令：</p><p>create database halodb character set utf8mb4 collate utf8mb4_bin;</p><p><strong>注意事项</strong>：</p><ul><li><code>username</code> 及 <code>password</code> 需要修改为您的 MySQL 数据库账号和密码。</li><li>默认时区为 <code>Asia/Shanghai</code>，如果与您所在时区不一致，则可以修改为您所在的时区。</li></ul><p>Halo 支持自定义后台管理的<strong>根路径</strong>。</p><p><code> admin-path: admin</code></p><p>注意：仅为改动后台管理的根路径，因此前后不带 <code>/</code>。</p><p>将缓存数据持久化保存在本地。</p><p><code> cache: memory</code></p><p>目前支持三种策略：</p><ul><li><code>memory</code> 将数据缓存至内存，重启服务缓存将清空。</li><li><code>level</code> 将数据缓存至本地，重启服务不会清空缓存。</li><li><code>redis</code> 将数据缓存至 Redis，重启服务不会清空缓存，如需分布式部署 Halo，请选用此种缓存方式。</li></ul><p>如果选用 Redis 缓存方式，请在配置文件加入 Redis 相关配置，完整的配置示例如下：</p><pre class="line-numbers language-none"><code class="language-none">server:  port: 8090    # Response data gzip.  compression:    enabled: true    spring:  datasource:    # MySQL database configuration.    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;halodb?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&amp;allowPublicKeyRetrieval&#x3D;true    username: root    password: 123456  redis:    # Redis cache configuration.    port: 6379    database: 0    host: 127.0.0.1    password: 123456halo:  # Your admin client path is https:&#x2F;&#x2F;your-domain&#x2F;&#123;admin-path&#125;  admin-path: admin  # memory or level or redis  cache: redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启用压缩对于减少带宽和加快页面加载非常有用，在<strong>未使用</strong> <code>Nginx</code> 或 <code>Caddy</code> 等反向代理服务器时（反向代理服务器通常是默认开启 Gzip 的），可以考虑开启系统自带的 Gzip 功能。</p><pre class="line-numbers language-none"><code class="language-none">server:  # Response data gzip.  compression:    enabled: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[两种数据库示例]</p><h4 id="H2-Database"><a href="#H2-Database" class="headerlink" title="H2 Database"></a>H2 Database</h4><pre class="line-numbers language-none"><code class="language-none">server:  port: 8090  # Response data gzip.  compression:    enabled: truespring:  datasource:    # H2 database configuration.    driver-class-name: org.h2.Driver    url: jdbc:h2:file:~&#x2F;.halo&#x2F;db&#x2F;halo    username: admin    password: 123456  # H2 database console configuration.  h2:    console:      settings:        web-allow-others: false      path: &#x2F;h2-console      enabled: falsehalo:  # Your admin client path is https:&#x2F;&#x2F;your-domain&#x2F;&#123;admin-path&#125;  admin-path: admin  # memory or level or redis  cache: memory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><pre class="line-numbers language-none"><code class="language-none">server:  port: 8090  # Response data gzip.  compression:    enabled: truespring:  datasource:    # MySQL database configuration.    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;halodb?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&amp;allowPublicKeyRetrieval&#x3D;true    username: root    password: 123456halo:  # Your admin client path is https:&#x2F;&#x2F;your-domain&#x2F;&#123;admin-path&#125;  admin-path: admin  # memory or level or redis  cache: memory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拉取最新docker镜像，"><a href="#拉取最新docker镜像，" class="headerlink" title="拉取最新docker镜像，"></a>拉取最新docker镜像，</h3><p><code>docker pull halohub/halo</code></p><p>查看端口是否被占用，</p><p><code>yum install lsof</code></p><p><code>lsof -i:8090</code></p><p>创建容器</p><p><code>docker run -it -d --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=unless-stopped halohub/halo</code></p><pre class="line-numbers language-none"><code class="language-none">-it： 开启输入功能并连接伪终端-d： 后台运行容器–name： 为容器指定一个名称-p： 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置。-v： 工作目录映射。形式为：-v 宿主机路径:&#x2F;root&#x2F;.halo，后者不能修改。–restart： 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">重启策略配置要为容器配置重新启动策略，在使用docker run命令时使用--restart标志。--restart标志的值包括如下几种：1．no容器退出时，不自动重启容器。这是默认值。2．on-failure[:max-retries]当容器以非零状态码(正常退出时状态码为0)退出时，重新启动。max-retries为最大重试次数(可选)，限制Docker守护程序尝试的重新启动重试次数。如不指定最大重试次数，默认为不断重试。3．always无论退出状态如何，始终重新启动容器。Docker守护程序将无限期地尝试重新启动容器。无论容器的当前状态如何，容器也将始终在守护程序启动时启动。4．unless-stopped类似always，无论退出状态如何，重新启动容器。区别在：如果容器在Docker守护程序停止之前已经处于停止状态，那么守护程序启动时，容器不会重新启动。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反向代理</p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><pre class="line-numbers language-none"><code class="language-none">upstream halo &#123;  server 127.0.0.1:8090;&#125;server &#123;  listen 80;  listen [::]:80;  server_name www.yourdomain.com;  client_max_body_size 1024m;  location &#x2F; &#123;    proxy_pass http:&#x2F;&#x2F;halo;    proxy_set_header HOST $host;    proxy_set_header X-Forwarded-Proto $scheme;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>停止并删除当前运行中的容器</li></ul><p><code>docker stop halo</code></p><p><code>docker ps -a</code></p><p><code>docker rm -f halo</code></p><p><code>rm -rf ~/.halo</code>     # 完全删除映射到本地的数据</p><ul><li>备份数据</li></ul><p><code>cp -r ~/.halo ~/.halo.backup</code></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> halo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础</title>
      <link href="/2022/05/01/Docker/"/>
      <url>/2022/05/01/Docker/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><p>安装环境</p><pre class="line-numbers language-none"><code class="language-none">sudo yum install -y yum-utils device-mapper-persistent-date lvm2sudo yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装docker</p><pre class="line-numbers language-none"><code class="language-none">sudo yum install -y docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl start docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看结果</p><pre class="line-numbers language-none"><code class="language-none">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开机自启</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装docker compose</p><p>下载dockercompose并添加执行权限</p><!--国内--><pre class="line-numbers language-none"><code class="language-none">curl -L https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.5.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composechmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><!--GitHub--><pre class="line-numbers language-none"><code class="language-none">sudo curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;Latest&#x2F;docker-compose-linux-x86_64-$(uname -s)-$(uname -m) -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composesudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看结果</p><pre class="line-numbers language-none"><code class="language-none">docker-compose -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加⼊加速镜像源地址</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json&#123;&quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重新加载配置⽂件，重启 docker 服务</p><pre class="line-numbers language-none"><code class="language-none">systemctl daemon-reloadsystemctl restart docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看本地镜像库</p><pre class="line-numbers language-none"><code class="language-none">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看活动实例，或者加-a查看全部</p><pre class="line-numbers language-none"><code class="language-none">docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行xxx镜像</p><pre class="line-numbers language-none"><code class="language-none">docker run xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除实例</p><pre class="line-numbers language-none"><code class="language-none">docker rm xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除镜像</p><pre class="line-numbers language-none"><code class="language-none">docker rmi xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker run docker&#x2F;whalesay cowsay boo</p><p>网不好，明天继续</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7基础命令</title>
      <link href="/2022/05/01/centos7/"/>
      <url>/2022/05/01/centos7/</url>
      
        <content type="html"><![CDATA[<p><strong>记录一下使用频次较高的命令，后面再来整理一篇好用的命令</strong></p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h4 id="查看网络信息"><a href="#查看网络信息" class="headerlink" title="查看网络信息"></a>查看网络信息</h4><pre class="line-numbers language-none"><code class="language-none">ifconfigip addrip address show#IP地址MAC地址dhclient#重新分配IPip route show#路由ip nip -s lss#网络信息netstat -anp | grep 8080#查看端口是否已经监听<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置固定IP"><a href="#设置固定IP" class="headerlink" title="设置固定IP"></a>设置固定IP</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-[eth0]#[网卡号]BOOTPROTO&#x3D;static#(none禁止DHCP，static启用静态IP地址，dhcp开启DHCP服务)IPV6INIT&#x3D;no#禁止IPV6ONBOOT&#x3D;yes#开机启动IPADDR&#x3D;172.3.4.249#静态IP地址NETMASK&#x3D;255.255.255.0#子网掩码PREFIX&#x3D;24#掩码长度GATEWAY&#x3D;172.3.4.1#网关DNS1&#x3D;218.104.111.114DNS2&#x3D;180.76.76.76#DNS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h4><pre class="line-numbers language-none"><code class="language-none">systemctl restart network.service#或service network restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="其他网络参数"><a href="#其他网络参数" class="headerlink" title="其他网络参数"></a>其他网络参数</h4><ul><li>是否允许DHCP获得的DNS覆盖本地的DNS<code>PEERDNS</code></li><li>是否从DHCP服务器获取用于定义接口的默认网关的信息的路由表条目<code>PEERROUTES</code></li><li>唯一标识<code>UUID</code></li><li>如果ipv4配置失败禁用设备<code>IPV4_FAILURE_FATAL=yes</code></li><li>如果ipv6配置失败禁用设备<code>IPV6_FAILURE_FATAL=yes</code></li><li>定义设备名称<code>NAME=“eth 或 ens”</code></li><li>address表示广播地址<code>BROADCAST=“address”</code></li><li>MAC-address表示指定一个MAC地址<code>MACADDR=“MAC-address”</code></li><li>是否允许非root用户控制该设备<code>USERCTL=yes/no</code></li></ul><h4 id="查看主机信息"><a href="#查看主机信息" class="headerlink" title="查看主机信息"></a>查看主机信息</h4><pre class="line-numbers language-none"><code class="language-none">hostnamectlcat &#x2F;etc&#x2F;centos-release#查看系统版本sestatus#se状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h4><pre class="line-numbers language-none"><code class="language-none">hostname 123#临时修改vim &#x2F;etc&#x2F;hostname#永久修改echo &quot;123 &gt;&gt;&#x2F;etc&#x2F;hostname#或者echo输出到末尾vim &#x2F;etc&#x2F;hosts#编辑或者echoecho &quot;IP空格hostname&quot; &gt;&gt;&#x2F;etc&#x2F;hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用sed修改selinux状态"><a href="#用sed修改selinux状态" class="headerlink" title="用sed修改selinux状态"></a>用sed修改selinux状态</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sed -i &quot;s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;g&quot; &#x2F;etc&#x2F;selinux&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="其他常用配置文件"><a href="#其他常用配置文件" class="headerlink" title="其他常用配置文件"></a>其他常用配置文件</h4><ul><li>配置域名服务客户端的控制文件<code>/etc/host.conf</code></li><li>完成主机名映射为IP地址的功能<code>/etc/hosts</code></li><li>域名服务客户端的配置文件,用于指定域名服务器的位置<code>/etc/resolv.conf</code></li><li>包含了主机最基本的网络信息,用于系统启动<code>/etc/sysconfig/network</code></li><li>系统启动时初始化网络的一些信息以及网卡的配置文件<code>/etc/sysconfig/network-script/</code></li><li>定义了由超级进程xinetd启动的网络服务<code>/etc/xinetd.conf</code></li><li>完成域名与网络地址的映射<code>/etc/networks</code></li><li>设定了主机使用的协议以及各个协议的协议号<code>/etc/protocols</code></li><li>设定主机的不同端口的网络服务<code>/etc/services</code></li></ul><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><pre class="line-numbers language-none"><code class="language-none">systemctl status firewalld#查看防火墙状态firewall-cmd --list-ports#查看防火墙开放了哪些端口systemctl stop firewalld.service#关闭防火墙service firewalld start#开启防火墙systemctl restart firewalld.service#重启防火墙<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent#开启端口--zone作用域;--add-port&#x3D;80&#x2F;tcp添加端口，格式为:端口&#x2F;通讯协议;--permanent永久生效，没有此参数重启后失效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld.servicesystemctl disable firewalld.service#永久关闭防火墙<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用终端远程登陆"><a href="#使用终端远程登陆" class="headerlink" title="使用终端远程登陆"></a>使用终端远程登陆</h3><ul><li><p>ssh空格@IP，cmd进入<code>ssh root@172.3.4.249</code></p><pre class="line-numbers language-none"><code class="language-none">1.tab键用于自动不全命令&#x2F;文件名&#x2F;目录名2.ctrl+l清理终端显示3.clear&#x2F;cls清理终端显示4.ctrl+c终止当前操作5.ctrl+r搜索历史命令history显示历史命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>scp (secure copy)#linux下基于ssh登录进行安全的远程文件拷贝命令</p><ul><li><p>递归复制整个目录<code>-r</code></p></li><li><p>详细方式输出<code>-v</code></p></li><li><p>不显示传输进度条<code>-q</code></p></li><li><p>允许压缩<code>-c</code></p><pre class="line-numbers language-none"><code class="language-none">scp -r &#x2F;usr&#x2F;local&#x2F;setup root@192.168.1.233:&#x2F;usr&#x2F;local&#x2F;scp 本地文件远程用户名@远程ip:远程文件夹&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><ul><li><p>查看vim是否安装<code>rpm -qa|grep vim</code></p></li><li><p>在线安装个编辑器<code>yum -y install vim</code></p></li><li><p>安装本地rpm包提示安装进度条<code>rpm -ivh xxx.rpm</code></p></li><li><p>卸载<code>rpm -e xxx</code>或<code>yum remove -y xxx</code></p></li><li><p>强制卸载</p><pre class="line-numbers language-none"><code class="language-none">rpm -qa|grep xxxrpm -e --nodeps xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><strong>查看软件配置文件路径</strong><code>rpm -qc xxx</code></p><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><ul><li>使用vi打开文件，默认是命令模式，需要输入a&#x2F;i进入编辑模式，然后输入文本，按下esc键，回到命令模式<ul><li>强制保存退出<code>:wq!</code></li><li>写入write<code>w</code></li><li>退出quit<code>q</code></li><li>强制<code>!</code></li><li>保存退出<code>:x</code></li><li>删除光标位置的字符(X删除前一个)<code>x</code></li><li>查找字符串(n下一个N上一个)<code>/xx</code></li><li>复制几行<code>数字YY</code></li><li>剪切几行<code>数字DD</code></li><li>插入<code>P</code></li><li>撤销<code>u</code></li><li>编辑的数据另存为<code>:w [filename]</code></li><li>如果已改动保持并退出，未改动不存储离开<code>ZZ</code></li><li>显示行号(:set nonu相反)<code>:set nu</code></li></ul></li></ul><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><h4 id="查看服务进程"><a href="#查看服务进程" class="headerlink" title="查看服务进程"></a>查看服务进程</h4><pre class="line-numbers language-none"><code class="language-none">pstree -pu#进程树ps -aux|grep xx#查看所有进程ps -ef|grep xx#查看父进程netstat -tunlp|grep port#根据端口号查看进程kill -9 进程数字 #强制结束进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作服务"><a href="#操作服务" class="headerlink" title="操作服务"></a>操作服务</h4><pre class="line-numbers language-none"><code class="language-none">systemctl start service_name#服务启动service service_name startsystemctl stop service_name#服务停止service service_name stopsystemctl status service_name#服务状态service service_name statussystemctl enable service_name#加入自启动chkconfig --add service_namesystemctl disable service_name#移除自启动chkconfig --del service_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="开机脚本"><a href="#开机脚本" class="headerlink" title="开机脚本"></a>开机脚本</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;init.d&#x2F;xxx#新建开机脚本chmod +x &#x2F;etc&#x2F;init.d&#x2F;xxx#赋权chkconfig --add xxx#加入开机列表chkconfig xxx on#状态开chkconfig --list#查看开机列表详情systemctl list-unit-files | grep nginx#搜索nginx的开机启动状态systemctl list-unit-files | grep enabled#搜索全部已启动的服务，enabled 启用；disabled 禁用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><p>查看系统当前编码<code>vim /etc/locale.conf</code>永久使用中文</p><pre class="line-numbers language-none"><code class="language-none">LANG&#x3D;&quot;zh_CN.UTF-8&quot;LC_ALL&#x3D;&quot;zh_CN.UTF-8&quot;LC_CTYPE&#x3D;&quot;zh_CN.UTF-8&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h4 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h4><ul><li>新建文件夹<code>mkdir</code></li><li>递归创建目录，即使上级目录不存在，会按目录层级自动创建目录<code>mkdir -p</code></li><li>新建文本<code>vi</code> <code>vim</code> <code>touch</code></li></ul><h4 id="路径与属性"><a href="#路径与属性" class="headerlink" title="路径与属性"></a>路径与属性</h4><ul><li><p>返回上级目录(cd ..&#x2F;..)上上层<code>cd ..</code></p></li><li><p>进入绝对路径目录<code>cd /</code></p></li><li><p>进入用户根目录(cd)<code>cd ~</code></p></li><li><p>查看当前的路径<code>pwd</code></p></li><li><p>显示文件属性(ll)<code>ls -l</code></p><ul><li>查看包括隐藏文件在内的所有文件以及属性<code>ls -al</code></li></ul></li></ul><h4 id="移动（搬家）命令-gt-move-gt-mv"><a href="#移动（搬家）命令-gt-move-gt-mv" class="headerlink" title="移动（搬家）命令 &gt; move &gt; mv"></a>移动（搬家）命令 &gt; move &gt; mv</h4><ul><li><p>要移动的文件 目标地址<code>mv /home/xb.py  /tmp/ xb1.py</code></p><ul><li>文件或文件夹改名<code>mv xxx.log  xx.py</code></li></ul></li></ul><h4 id="删除-gt-remove-gt-rm"><a href="#删除-gt-remove-gt-rm" class="headerlink" title="删除 &gt; remove &gt; rm"></a>删除 &gt; remove &gt; rm</h4><ul><li>删除root目录下的xx文件夹<code>rm -rf /root/xx</code></li><li>删除etc&#x2F;yum.repos.d目录下的所有文件<code>rm -rf /etc/yum.repos.d/*</code></li><li>需要删除确认<code>-i</code></li><li>强制删除<code>-f</code></li><li>递归删除目录和内容<code>-r</code></li></ul><p></p><h4 id="复制-gt-copy-gt-cp"><a href="#复制-gt-copy-gt-cp" class="headerlink" title="复制 &gt; copy &gt; cp"></a>复制 &gt; copy &gt; cp</h4><ul><li>复制 xxx.txt 到 &#x2F;tmp目录下<code>cp xxx.txt /tmp</code></li><li>复制 xxx.txt 顺便改名为 xb.txt<code>cp xxx.txt /tmp/xb.txt</code></li><li>linux下面有很多命令，一般没有办法直接处理文件夹，因此需要加上（参数 ）<br>递归，复制目录以及目录的子文件<code>cp -r</code><br>复制文件，同时保持文件的属性不变(stat)<code>cp -p</code><br>相当于( -pdr)<code>cp -a</code><br>递归复制test文件夹，为rest2<code>cp -r test test2</code></li><li>输入字符串<code>echo</code><ul><li>添加xx字符串到test.txt<code>echo &quot;xx&quot; &gt;&gt;test.txt</code></li></ul></li></ul><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>创建硬链接(一个文件多个路径，防止误删)<code>ln xx xx</code><br>创建软链接(符号链接)<code>ln -s xx xx</code></p><h4 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h4><pre class="line-numbers language-none"><code class="language-none">tar zxvf &#x2F;root&#x2F;xxx.tar.gz -C &#x2F;xxx&#x2F;xxx#解压文件到指定目录tar -xJvf &#x2F;root&#x2F;xxx.tar.xz -C &#x2F;xxx&#x2F;xxxtar zcvf xxx.tar.gz .&#x2F;xxx&#x2F;#压缩当前目录下的xxx文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><ul><li>用于在终端下载网络文件<br>wget [参数] 下载地址</li></ul><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><table><thead><tr><th align="center">d</th><th align="center">rwx</th><th align="center">r-x</th><th>r-x</th></tr></thead><tbody><tr><td align="center">d文件夹&#x2F;l链接&#x2F;-文件</td><td align="center">属主权限</td><td align="center">属组权限</td><td>其他用户权限</td></tr><tr><td align="center">r读&#x2F;147</td><td align="center">w写&#x2F;258</td><td align="center">x执行&#x2F;369</td><td></td></tr></tbody></table><ul><li><p>test文件属主改为123<code>chown -R 123 test</code></p></li><li><p>opt目录下的test文件夹给123管理<code>sudo chown -R 123:123 /opt/test</code></p></li><li><p>test文件属组改为123<code>chgrp -R 123 test</code></p></li><li><p>test最高权限(r:4,w:2,x:1)<code>chmod -R 777 test</code></p></li></ul><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -name xxx#查找根目录下xxx的文件find .&#x2F; -iname xxx#加i标识忽略大小写cat xxx | grep 123#匹配xx文本中的123字符cat xxx | grep 123 -i#加-i参数忽略大小写find . |xargs grep -ri &#39;123&#39;#查找当前目录包含文本123的文件位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命令路径"><a href="#命令路径" class="headerlink" title="命令路径"></a>命令路径</h4><pre class="line-numbers language-none"><code class="language-none">which xx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><ul><li>查看(tac)从下到上反着看<code>cat</code></li><li>显示行号<code>nl</code></li><li>翻页查看(空格翻页，enter往下翻一行，:f查看当前行号)<code>more</code></li><li>与more相反(q离开)(&#x2F;xx，向下查找字符串，?向上查询，n继续查找N与n方向相反)<code>less</code></li><li>查看文件前20行<code>head -n 20 xx.xx</code></li><li>与head相反<code>tail</code></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="重启关机"><a href="#重启关机" class="headerlink" title="重启关机"></a>重启关机</h4><p>关闭系统前同步内存到硬盘中<code>sync</code></p><ul><li><p>重启系统<code>reboot</code> <code>systemctl</code> <code>reboot</code></p></li><li><p>十分钟后重启<code>shutdown -r nowshutdown -r +10</code><br>#重启机器</p></li><li><p>关闭系统<code>poweroff</code> <code>systemctl poweroff</code> <code>halt</code></p></li><li><p>马上关机<code>shutdownshutdown -h now</code></p></li><li><p>十分钟后关机<code>shutdown -h 10</code> <code>shutdown -h +10</code></p></li><li><p>今天14点关机<code>shutdown -h 14:00</code></p></li></ul><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><ul><li>新建用户(自动创建123用户及主目录)<code>useradd -m 123</code></li><li>删除用户(删除用户账号以及主目录)<code>userdel -r 123</code></li><li>切换用户<code>su 123</code></li><li>修改密码<code>passwd 123</code></li><li>锁定账户<code>passwd -l 123</code></li></ul><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">df -h#查看磁盘占用率lsblk#列出磁盘信息lsblk -f#列出文件系统du -ha#查看每个文件占用du -hs#查看当前文件夹大小du -hsm &#x2F;*#检查根目录下每个文件占用的容量du -hs &#x2F;usr&#x2F;src&#x2F;#查看指定目录文件占用mount &#x2F;dev&#x2F;123 &#x2F;mnt&#x2F;123#挂载磁盘(将外部设备123挂载到mut目录下umount -f &#x2F;mnt&#x2F;123#强制卸载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>halo搭建</title>
      <link href="/2022/04/01/halo/"/>
      <url>/2022/04/01/halo/</url>
      
        <content type="html"><![CDATA[<p><strong>Halo</strong> [ˈheɪloʊ]，一款现代化的开源博客&#x2F;CMS系统。</p><p><strong>前期准备</strong>（Java&#x2F;nginx)</p><p>安装java。。。。</p><p>目前运行 Halo 的最低依赖要求为 JRE 11，请务必确保在进行下面操作之前已经正确安装了 JRE。</p><p>目前介绍两种 Linux 发行版的安装方式，均为 OpenJRE，不推荐 Oracle 版本。</p><pre class="line-numbers language-none"><code class="language-none">rpm -qa | grep javayum -y remove xxxsudo yum install java-11-openjdk -yjava -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装nginx。。。</p><h3 id="安装halo"><a href="#安装halo" class="headerlink" title="安装halo"></a>安装halo</h3><h5 id="创建工作目录"><a href="#创建工作目录" class="headerlink" title="创建工作目录"></a>创建工作目录</h5><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;root&#x2F;.halo &amp;&amp; cd &#x2F;root&#x2F;.halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="下载运行包官网安装包"><a href="#下载运行包官网安装包" class="headerlink" title="下载运行包官网安装包"></a>下载运行包<a href="https://docs.halo.run/getting-started/downloads">官网安装包</a></h4><pre class="line-numbers language-none"><code class="language-none">curl -L https:&#x2F;&#x2F;github.com&#x2F;halo-dev&#x2F;halo&#x2F;releases&#x2F;download&#x2F;v1.5.3&#x2F;halo-1.5.3.jar --output halo.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="下载示例配置文件到"><a href="#下载示例配置文件到" class="headerlink" title="下载示例配置文件到"></a>下载示例配置文件到</h4><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl.halo.run&#x2F;config&#x2F;application-template.yaml -O .&#x2F;application.yaml <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="编辑配置文件，配置数据库或者端口等，如需配置请参考-配置参考"><a href="#编辑配置文件，配置数据库或者端口等，如需配置请参考-配置参考" class="headerlink" title="编辑配置文件，配置数据库或者端口等，如需配置请参考 配置参考"></a>编辑配置文件，配置数据库或者端口等，如需配置请参考 <a href="https://docs.halo.run/getting-started/config">配置参考</a></h5><pre class="line-numbers language-none"><code class="language-none">vim application.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试运行 Halo</p><pre class="line-numbers language-none"><code class="language-none">java -jar halo.jarnohup java -jar halo.jar &amp;#或者后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看到类似以下日志输出，则代表启动成功</p><pre class="line-numbers language-none"><code class="language-none">run.halo.app.listener.StartedListener    : Halo started at         http:&#x2F;&#x2F;127.0.0.1:8090run.halo.app.listener.StartedListener    : Halo admin started at   http:&#x2F;&#x2F;127.0.0.1:8090&#x2F;adminrun.halo.app.listener.StartedListener    : Halo has started successfully!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>打开 <code>http://ip:8090</code> 即可看到安装引导界面。</p><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><h4 id="下载-Halo-官方的-halo-service-模板"><a href="#下载-Halo-官方的-halo-service-模板" class="headerlink" title="下载 Halo 官方的 halo.service 模板"></a>下载 Halo 官方的 halo.service 模板</h4><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl.halo.run&#x2F;config&#x2F;halo.service -O &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;halo.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修改-halo-service"><a href="#修改-halo-service" class="headerlink" title="修改 halo.service"></a>修改 halo.service</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;halo.service[Unit]Description&#x3D;Halo ServiceDocumentation&#x3D;https:&#x2F;&#x2F;halo.runAfter&#x3D;network-online.targetWants&#x3D;network-online.target[Service]Type&#x3D;simpleUser&#x3D;USERExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;java -server -Xms256m -Xmx256m -jar YOUR_JAR_PATH&#x3D;&#x2F;root&#x2F;.halo&#x2F;halo.jarExecStop&#x3D;&#x2F;bin&#x2F;kill -s QUIT $MAINPIDRestart&#x3D;alwaysStandOutput&#x3D;syslogStandError&#x3D;inherit[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl daemon-reload#重新加载 systemdsystemctl start halo#运行服务systemctl enable halo#在系统启动时启动服务journalctl -n 20 -u halo#查看服务日志检查启动状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h3><pre class="line-numbers language-none"><code class="language-none">upstream halo &#123;  server 127.0.0.1:8090;&#125;server &#123;  listen 80;  listen [::]:80;  server_name www.yourdomain.com;  client_max_body_size 1024m;  location &#x2F; &#123;    proxy_pass http:&#x2F;&#x2F;halo;    proxy_set_header HOST $host;    proxy_set_header X-Forwarded-Proto $scheme;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql触发器</title>
      <link href="/2022/03/19/mysql_trigger/"/>
      <url>/2022/03/19/mysql_trigger/</url>
      
        <content type="html"><![CDATA[<h1 id="h1-">mysql触发器</h1><hr><pre class="line-numbers language-none"><code class="language-none">create trigger 名字 时间(after|before) 动作(insert|update|delete) on test1for each rowbeginsql语句 test2;end &#x2F;&#x2F;delimiter;delimiter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">create table test1 (id int,name varchar(10));create table test2 ( id int,rhce int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">create table test1 (id int,name varchar(10));create table test2 ( id int,rhce int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">insert into test1 values (1,&#39;tom1&#39;),(2,&#39;tom2&#39;),(3,&#39;tom3&#39;);insert into test2 values (1,&#39;100&#39;),(2,&#39;200&#39;),(3,&#39;300&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">delimiter &#x2F;&#x2F;create trigger lenovo after update on test1for each rowbeginupdate test2 set rhce&#x3D;400 where id&#x3D;1;end &#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">update test1 set name&#x3D;&#39;tom11&#39; where id&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">drop trigger if exists lenovo;delimiter &#x2F;&#x2F;create trigger lenovo after update on test1for each rowbeginupdate test2 set rhce&#x3D;400 where id&#x3D;old.id;end &#x2F;&#x2F;delimiter;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">update test1 set name&#x3D;&#39;tom11&#39; where id&#x3D;2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;hr&gt;drop table test1,test2;create table test1 (id int,rhce int);create table test2 ( id int,res enum(&#39;pass&#39;,&#39;fail&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">insert into test1 values (1,&#39;200&#39;),(2,&#39;210&#39;),(3,&#39;300&#39;);insert into test2 values (1,&#39;fail&#39;),(2,&#39;pass&#39;),(3,&#39;pass&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">drop trigger if exists lenovo;delimiter &#x2F;&#x2F;create trigger lenovo after update on test1for each rowbeginif new.rhce &gt;&#x3D;60 thenupdate test2 set res&#x3D;&#39;pass&#39; where id&#x3D;new.id;elseif new.rhce &lt; 60 thenupdate test2 set res&#x3D;&#39;fail&#39; where id&#x3D;old.id;end if;end &#x2F;&#x2F;delimiter;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">update test1 set rhce&#x3D;240 where id&#x3D;1;update test1 set rhce&#x3D;10 where id&#x3D;3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博文</title>
      <link href="/2021/12/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
      <url>/2021/12/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客搭建记录"><a href="#hexo博客搭建记录" class="headerlink" title="hexo博客搭建记录"></a>hexo博客搭建记录</h2><h4 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h4><p><a href="https://www.kernel.org/pub/software/scm/git/git-2.34.1.tar.gz">git官网</a></p><p>将git-2.34.1.tar.gz放到root目录下解压 <code>tar -zxvf git-2.34.1.tar.gz</code> </p><p>安装依赖（y）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc-c++ perl-ExtUtils-MakeMaker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除已有的git <code>yum remove git</code>  (y) </p><p>进入文件夹 <code>cd git-2.34.1</code> 执行配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">make configure./configure --prefix=/usr/local/gitmake profix=/usr/local/gitmake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置环境变量 <code>vim /etc/profile</code> 文件末加上</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">export GIT_HOME=/usr/local/gitexport PATH=$PATH:$GIT_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>刷新环境变量 <code>source /etc/profile</code> 验证 <code>git --version</code> </p><h4 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2. 安装node.js"></a>2. 安装node.js</h4><p><a href="https://nodejs.org/dist/v16.13.1/node-v16.13.1-linux-x64.tar.xz">nodejs官网</a></p><p>将node-v16.13.1-linux-x64.tar.xz放到root目录下</p><p>创建node <code>mkdir /usr/local/node</code> 并进入 <code>cd /usr/local/node</code></p><p>将root目录下的压缩文件解压到当前目录</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">tar -xJvf /root/node-v16.13.1-linux-x64.tar.xz -C ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置环境变量 <code>vim ~/.bash_profile</code> 文件末加上</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">export PATH=/usr/local/node/node-v16.13.1-linux-x64/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>刷新环境变量 <code>source ~/.bash_profile</code> 验证 <code>node -v</code> <code>npm version</code> <code>npx -v</code></p><p>全局切换到淘宝的cnpm国内镜像源</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">npm install -g cnpm --registry=https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证 <code>cnpm -v</code> </p><h4 id="3-安装hxeo"><a href="#3-安装hxeo" class="headerlink" title="3. 安装hxeo"></a>3. 安装hxeo</h4><p>利用cnpm全局安装hexo博客框架</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">cnpm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证 <code>hexo -v</code> </p><p>初始化 <code>hexo init blog</code> (这一步失败换githubDNS 199.232.5.194)</p><p>进入 <code>cd blog</code> </p><p>启动博客 <code>hexo s</code> 浏览 <a href="http://localhost:4000/">本机博客</a></p><p>新建博客 <code>hexo n &quot;我的第一篇博文&quot;</code> </p><p>编辑博客 <code>vim /source/_posts/我的第一篇博文.md</code> </p><p>安装git部署插件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">cnpm install --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑配置文件 <code>vim _config.yml</code> 文末添加配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">type: gitrepo: https://github.com/yizhongyu/yizhongyu.github.io.gitbranch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>hexo clean</code> 清除 </p><p><code>hexo g</code> 生成 </p><p><code>hexo d</code> 推上去 (这一步容易鉴权失败,改令牌上传)</p><p>后台管理，md编辑技巧等等待补充~~</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双网卡机器路由表设置</title>
      <link href="/2021/08/31/doubleifg/"/>
      <url>/2021/08/31/doubleifg/</url>
      
        <content type="html"><![CDATA[<p>客户工作台有一台计算机需要同时连入公网与内网。</p><p>网络A（互联网）IP：172.16.3.252子网掩码：255.255.248.0网关：172.16.1.1</p><p>网络B（局域网）：192.168.210.219子网掩码：255.255.255.0网关：192.168.210.1</p><p>需要注意的是 这台机器的网关地址是:192.168.210.1。这将会导致当一个外部请求访问它的公网地址:172.16.3.252时，响应数据包会从内部网络接口出去，请求端接收到的包源IP不再是172.16.3.252，这种情况响应数据包通常会被直接丢弃，导致通信失败。</p><p>解决办法有二</p><h3 id="一，设置公网IP为默认网关"><a href="#一，设置公网IP为默认网关" class="headerlink" title="一，设置公网IP为默认网关"></a>一，设置公网IP为默认网关</h3><h4 id="①，win设置"><a href="#①，win设置" class="headerlink" title="①，win设置"></a>①，win设置</h4><p>二个网卡要将网卡A的网关设为默认网关，即将网卡A的跃点设为1，就可设为默认网关了。（跃点设置具体为：在TCP&#x2F;IP的高级属性里，去掉窗口下部的“自动跃点计数”前的小勾，并填写1即可）</p><p>在CMD下输入<code>route print -4</code>后面显示的默认网关就改为了172.16.1.1</p><p>接着，再增加一条路由命令CMD：</p><pre class="line-numbers language-none"><code class="language-none">route -p add 192.168.210.0 mask 255.255.255.0 172.16.3.252 metric 30 (if 网卡编号)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（if 网卡编号：interface编号设置指定网卡，可不加）</p><p>所有需要发往192.168.210.0&#x2F;24地址段的IP数据包，全部由192.168.210.1路径转发。</p><p>route add命令的主要作用是添加静态路由，-p 参数代表永久写入路由表，如果不加此参数，每次机器重启后设置会丢失，要重新设置。</p><p>使用”delete”，”change”命令参数可以对路由表中的路由信息进行删除和修改。</p><p>使用<code>netstat -rn</code>命令查看当前的路由信息</p><h4 id="②，Linux设置"><a href="#②，Linux设置" class="headerlink" title="②，Linux设置"></a>②，Linux设置</h4><pre class="line-numbers language-none"><code class="language-none">route add -net 172.16.1.1 netmask 240.0.0.0 dev eth0    #增加一条到达172.16.1.1的路由。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-none"><code class="language-none">ip route add default via  172.16.1.1  dev eth0#设置系统默认路由为172.16.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">route add default gw 172.16.1.1#设置默认网关为172.16.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二，策略路由"><a href="#二，策略路由" class="headerlink" title="二，策略路由"></a>二，策略路由</h3><ol><li><p><strong>Linux</strong>给所有从公网接口eth0进来的包都打上一个标记(fwmark)。</p><pre class="line-numbers language-none"><code class="language-none">iptables -A INPUT -i eth0 -d 172.16.3.252 -j CONNMARK --set-mark 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或对一次连接的第一个包打标记</p><pre class="line-numbers language-none"><code class="language-none">iptables -A INPUT -i eth0 -d 172.16.3.252 -m state --state NEW -j CONNMARK --set-mark 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>当响应数据包返回时，利用connmark的连接追踪功能给响应包也打上相同的标记。</p><pre class="line-numbers language-none"><code class="language-none">iptables -t mangle -A OUTPUT -j CONNMARK --restore-mark<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：必需在 mangle 表执行 connmark 标记恢复。因为在mangle表之后会进行一次 reroute check 重新路由，这使得下一步得以发生。</p></li><li><p>配置策略路由，让打了标记(fwmark 1)的包全部走 eth0 接口。</p><pre class="line-numbers language-none"><code class="language-none">echo 200 public &gt;&gt; &#x2F;etc&#x2F;iproute2&#x2F;rt_tablesip rule add table publicip route add table public default via 172.16.1.1 dev eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-none"><code class="language-none">iptables -L -nv#列出已设置的规则ip route list#显示核心路由表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="启动网络转发规则"><a href="#启动网络转发规则" class="headerlink" title="启动网络转发规则"></a>启动网络转发规则</h4><p>公网<code>172.16.3.252</code>让内网<code>192.168.210.0/24</code>上网</p><pre class="line-numbers language-none"><code class="language-none">iptables -t nat -A POSTROUTING -s 192.168.210.0&#x2F;24 -j SNAT --to-source 172.16.3.252<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h4><p>本机的 2222 端口映射到内网虚拟机的22 端口</p><pre class="line-numbers language-none"><code class="language-none">iptables -t nat -A PREROUTING -d 172.16.3.252 -p tcp --dport 2222  -j DNAT --to-dest 192.168.111.111:22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
