<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo搭建</title>
      <link href="/2022/05/27/hexo%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/05/27/hexo%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p><strong>hexo需要node.js来支持</strong></p><p><a href="https://nodejs.org/dist/latest/">node最新版</a> <a href="https://nodejs.org/dist/v16.15.0/node-v16.15.0-linux-x64.tar.xz">node长期支持版</a></p><span id="more"></span> <h5 id="上传node源码包到服务器"><a href="#上传node源码包到服务器" class="headerlink" title="上传node源码包到服务器"></a>上传node源码包到服务器</h5><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\node-v16.15.0-linux-x64.tar.xz root@39.106.67.52:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;usr&#x2F;local&#x2F;nodetar -xJvf &#x2F;opt&#x2F;node-v16.15.0-linux-x64.tar.xz -C &#x2F;usr&#x2F;local&#x2F;node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><pre class="line-numbers language-none"><code class="language-none">yum -y install epel-release wege gcc pcre-devel zlib-devel vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="编辑主目录下的配置文件，添加路径"><a href="#编辑主目录下的配置文件，添加路径" class="headerlink" title="编辑主目录下的配置文件，添加路径"></a>编辑主目录下的配置文件，添加路径</h5><pre class="line-numbers language-none"><code class="language-none">vim ~&#x2F;.bash_profileexport PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;node&#x2F;node-v16.15.0-linux-x64&#x2F;bin:$PATHsource ~&#x2F;.bash_profile#刷新环境变量node -v#验证npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局切换到淘宝的cnpm国内镜像源</p><pre class="line-numbers language-none"><code class="language-none">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.orgcnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="安装hexo博客框架"><a href="#安装hexo博客框架" class="headerlink" title="安装hexo博客框架"></a>安装hexo博客框架</h4><pre class="line-numbers language-none"><code class="language-none">cnpm install -g hexo-cli#cnpm安装hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="上传备份hexo包到服务器"><a href="#上传备份hexo包到服务器" class="headerlink" title="上传备份hexo包到服务器"></a>上传备份hexo包到服务器</h5><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\themes\hexo.tar.gz root@192.168.200.98:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h5><pre class="line-numbers language-none"><code class="language-none">tar -zxvf &#x2F;opt&#x2F;hexo.tar.gz -C &#x2F;root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h5><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;root&#x2F;bloghexo n &quot;123&quot;#新建一篇博文hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="访问地址IP端口4000"><a href="#访问地址IP端口4000" class="headerlink" title="访问地址IP端口4000"></a><a href="http://localhost:4000/">访问地址</a>IP端口4000</h5><p>安装后台<!--可选--></p><pre class="line-numbers language-none"><code class="language-none">cnpm install --save hexo-admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="http://localhost:4000/admin">访问地址</a>IP端口4000&#x2F;admin</p><h5 id="准备上传到GitHub静态"><a href="#准备上传到GitHub静态" class="headerlink" title="准备上传到GitHub静态"></a>准备上传到GitHub静态</h5><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;root&#x2F;bloghexo clean#清除缓存hexo g#生成静态网页cnpm install --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>hexo配置文件：&#x2F;root&#x2F;blog&#x2F;_config.yml</p><p>主题配置文件：&#x2F;root&#x2F;blog&#x2F;themes&#x2F;next&#x2F;_config.yml</p><h5 id="生成静态网页并将本地数据部署到设定的GitHub"><a href="#生成静态网页并将本地数据部署到设定的GitHub" class="headerlink" title="生成静态网页并将本地数据部署到设定的GitHub"></a>生成静态网页并将本地数据部署到设定的GitHub</h5><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>备份博客</p><pre class="line-numbers language-none"><code class="language-none">cdtar -zcvf 博客.tar.gz .&#x2F;blog&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一键删除博客</p><pre class="line-numbers language-none"><code class="language-none">rm -rf &#x2F;root&#x2F;blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新生成博客文件</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索插件</p><pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文章字数统计插件</p><pre class="line-numbers language-none"><code class="language-none">cnpm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机基础设置</title>
      <link href="/2022/05/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/05/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ol><li><p>固定IP</p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens192<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关防火墙</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld.servicesystemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装源</p><pre class="line-numbers language-none"><code class="language-none">yum install epel-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><span id="more"></span><ol><li><p>安装vim</p><pre class="line-numbers language-none"><code class="language-none">yum -y install vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关se(重启生效)</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;selinux&#x2F;configSELINUX&#x3D;disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>改hostname</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加hosts</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>节点间免密</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsassh-copy-id node1ssh-copy-id node2,,,,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装jdk</p><pre class="line-numbers language-none"><code class="language-none">rpm -ivh jdk-8u333-linux-x64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认home路径：&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64</p><p>添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;java.shexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64export CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;binsource &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集群内部免密</title>
      <link href="/2022/05/21/%E9%9B%86%E7%BE%A4%E5%86%85%E9%83%A8%E5%85%8D%E5%AF%86/"/>
      <url>/2022/05/21/%E9%9B%86%E7%BE%A4%E5%86%85%E9%83%A8%E5%85%8D%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>vim &#x2F;etc&#x2F;hosts</p><p>命令模式dd删除头两行后添加</p><p>192.168.200.99 node01</p><p>192.168.200.98 node02</p><p>，，，以此类推</p><p>多执行模式</p><p>机器产生自己的公钥</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将公钥拷贝给每台机器</p><pre class="line-numbers language-none"><code class="language-none">ssh-copy-id node01ssh-copy-id node02,,,,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos环境变量</title>
      <link href="/2022/05/20/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2022/05/20/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;etc&#x2F;profile.d&#x2F;*.sh</p><p>弃用 vim &#x2F;etc&#x2F;profile</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;java.shexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64export CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;hadoop.shexport HADOOP_HOME&#x3D;&#x2F;opt&#x2F;hadoop-2.7.1export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;git.shexport GIT_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;git&#x2F;git-2.36.1export PATH&#x3D;$PATH:$GIT_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>source &#x2F;etc&#x2F;profile</p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper</title>
      <link href="/2022/05/19/zookeeper/"/>
      <url>/2022/05/19/zookeeper/</url>
      
        <content type="html"><![CDATA[<p>上传zookeeper压缩包</p><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\apache-zookeeper-3.8.0-bin.tar.gz root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;usr&#x2F;local&#x2F;zookeepertar -zxvf &#x2F;opt&#x2F;apache-zookeeper-3.8.0-bin.tar.gz -C &#x2F;usr&#x2F;local&#x2F;zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从模板拷贝zoo配置文件，配置</p><pre class="line-numbers language-none"><code class="language-none">cp &#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;apache-zookeeper-3.8.0-bin&#x2F;conf&#x2F;zoo_sample.cfg &#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;apache-zookeeper-3.8.0-bin&#x2F;conf&#x2F;zoo.cfgvim &#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;apache-zookeeper-3.8.0-bin&#x2F;conf&#x2F;zoo.cfgdataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;zkdata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>使用</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;apache-zookeeper-3.8.0-bin&#x2F;.&#x2F;bin&#x2F;zkServer.sh start .&#x2F;conf&#x2F;zoo.cfg#启动zk服务器.&#x2F;bin&#x2F;zkServer.sh status .&#x2F;conf&#x2F;zoo.cfg#查看zk服务器状态.&#x2F;bin&#x2F;zkServer.sh stop .&#x2F;conf&#x2F;zoo.cfg#停止zk服务器.&#x2F;zkCli.sh#启动后进入客户端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部操作</p><pre class="line-numbers language-none"><code class="language-none">ls &#x2F;#查看根目录create &#x2F;test1create &#x2F;test2 abc#创建get &#x2F;test2#拿数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>集群</strong></p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;zkdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mkdir zk1 zk2 zk3 zk4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cd zk1&#x2F;</p><pre class="line-numbers language-none"><code class="language-none">vim myid 1echo 2 &gt; .&#x2F;zk2&#x2F;myidecho 3 &gt; .&#x2F;zk3&#x2F;myidecho 4 &gt; .&#x2F;zk4&#x2F;myid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;apache-zookeeper-3.8.0-bin&#x2F;conf</p><p>cp zoo.cfg zoo1.cfg</p><p>vim zoo1.cfg</p><pre class="line-numbers language-none"><code class="language-none">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;zkdata&#x2F;zk1server.1&#x3D;192.168.200.99:2001:3001server.2&#x3D;192.168.200.98:2002:3002server.3&#x3D;192.168.200.97:2003:3003server.4&#x3D;192.168.200.96:2004:3004:observer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;zkdata&#x2F;zk2clientPort&#x3D;2182server.1&#x3D;192.168.200.99:2001:3001server.2&#x3D;192.168.200.98:2002:3002server.3&#x3D;192.168.200.97:2003:3003server.4&#x3D;192.168.200.96:2004:3004:observer。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动集群并查看leader，follower，observer</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;bin&#x2F;zkServer.sh start .&#x2F;conf&#x2F;zoo1.cfg.&#x2F;bin&#x2F;zkServer.sh status .&#x2F;conf&#x2F;zoo1.cfg。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>连接zk集群</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;bin&#x2F;zkCli.sh -server 192.168.200.99:2181,192.168.200.98:2182,192.168.200.97:2183<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2022/05/18/redis/"/>
      <url>/2022/05/18/redis/</url>
      
        <content type="html"><![CDATA[<p><strong>Remote Dictionary Server远程字典服务</strong></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-none"><code class="language-none">REDIS缓存安装部署安装包直接放在root⽬录下1、在&#x2F;usr&#x2F;local&#x2F;下创建redis⽂件夹并进⼊cd &#x2F;usr&#x2F;local&#x2F;mkdir rediscd redis2、将Redis安装包解压到&#x2F;usr&#x2F;local&#x2F;redis中即可tar zxvf &#x2F;root&#x2F;redis-5.0.14.tar.gz -C .&#x2F;编译并安装cd redis-5.0.14&#x2F;make &amp;&amp; make install将REDIS安装为系统服务并后台启动cd utils&#x2F;.&#x2F;install_server.sh此处我全部选择的默认配置即可，有需要可以按需定制查看REDIS服务启动情况systemctl status redis_6379.service启动REDIS客户端并测试启动⾃带的redis-cli客户端redis-cliset foo barget foo设置允许远程连接编辑redis配置⽂件vim &#x2F;etc&#x2F;redis&#x2F;6379.conf将bind 127.0.0.1修改为0.0.0.0然后重启Redis服务systemctl restart redis_6379.service设置访问密码编辑redis配置⽂件vim &#x2F;etc&#x2F;redis&#x2F;6379.conf找到#requirepass foobared去掉注释，将foobared修改为⾃⼰想要的密码，保存即可。保存，重启Redis服务systemctl restart redis_6379.serviceauth 密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>或者</p><pre class="line-numbers language-none"><code class="language-none">tar zxvf &#x2F;root&#x2F;redis-5.0.14.tar.gz -C .&#x2F;make &amp;&amp; make installcd utils&#x2F;.&#x2F;install_server.shsystemctl status redis_6379.servicevim &#x2F;etc&#x2F;redis&#x2F;6379.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="line-numbers language-none"><code class="language-none">redis-server redis.conf#启动(redis服务加配置文件)redis-cli -p 6379#连接(redis客户端加IP加端口号)redis-cli -h 192.168.200.99 -p 6379#指定服务器主机名，默认127.0.0.1config set requirepass &quot;123&quot;#登录进去后(设置密码123)config get requirepass#查看密码auth 123#登录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置文件redis-conf"><a href="#配置文件redis-conf" class="headerlink" title="配置文件redis.conf"></a>配置文件redis.conf</h4><h5 id="INCLUDES（包含）"><a href="#INCLUDES（包含）" class="headerlink" title="INCLUDES（包含）"></a>INCLUDES（包含）</h5><p>可包含多个配置文件</p><p>include &#x2F;path&#x2F;to&#x2F;local.conf</p><p>include &#x2F;path&#x2F;to&#x2F;other.conf</p><h5 id="NETWORK（网络）"><a href="#NETWORK（网络）" class="headerlink" title="NETWORK（网络）"></a>NETWORK（网络）</h5><p>bind 127.0.0.1（默认本地访问）</p><p>bind 0.0.0.0（允许远程连接）</p><p>protected-mode yes（是否受保护）</p><p>port 6379（默认端口）</p><h5 id="GENERAL（通用）"><a href="#GENERAL（通用）" class="headerlink" title="GENERAL（通用）"></a>GENERAL（通用）</h5><p>daemonize yes（守护进程开启）后台</p><p>pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid如果是后台运行，需要指定一个pid文件</p><p>loglevel notice（debug、verbose、notice、warning）日志级别</p><p>logfile &#x2F;var&#x2F;log&#x2F;redis_6379.log（日志文件）</p><p>databases 16（数据库数量）</p><p>always-show-logo yes（显示logo）</p><h5 id="SNAPSHOTTING（快照）"><a href="#SNAPSHOTTING（快照）" class="headerlink" title="SNAPSHOTTING（快照）"></a>SNAPSHOTTING（快照）</h5><p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件.rdb，.aof</p><p>save 900 1（900秒内至少有一个key进行了修改，及进行持久化操作）<br>save 300 10（300秒内至少有10个key进行了修改，及进行持久化操作）<br>save 60 10000（一分钟内至少有10000个key进行了修改，及进行持久化操作）</p><p>stop-writes-on-bgsave-error yes（持久化出错后是否继续工作）</p><p>rdbcompression yes（是否压缩.rdb文件）</p><p>rdbchecksum yes（校验.rdb文件）</p><p>dbfilename dump.rdb（.rdb名称）</p><p>dir &#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379（.rdb文件保存目录）</p><h5 id="REPLICATION（主从复制）"><a href="#REPLICATION（主从复制）" class="headerlink" title="REPLICATION（主从复制）"></a>REPLICATION（主从复制）</h5><h5 id="SECURITY（安全）"><a href="#SECURITY（安全）" class="headerlink" title="SECURITY（安全）"></a>SECURITY（安全）</h5><p>requirepass foobared（去掉前面注释foobared改成密码）</p><h5 id="CLIENTS（客户端限制）"><a href="#CLIENTS（客户端限制）" class="headerlink" title="CLIENTS（客户端限制）"></a>CLIENTS（客户端限制）</h5><p>maxclients 10000（最大连接客户端一万个）</p><h5 id="MEMORY-MANAGEMENT（内存管理）"><a href="#MEMORY-MANAGEMENT（内存管理）" class="headerlink" title="MEMORY MANAGEMENT（内存管理）"></a>MEMORY MANAGEMENT（内存管理）</h5><p>maxmemory <bytes>（最大内存）</p><p>maxmemory-policy noeviction（内存爆了后的策略）</p><h5 id="APPEND-ONLY-MODE（-aof配置）"><a href="#APPEND-ONLY-MODE（-aof配置）" class="headerlink" title="APPEND ONLY MODE（.aof配置）"></a>APPEND ONLY MODE（.aof配置）</h5><p>appendonly no（开关）</p><p>appendfilename “appendonly.aof”（持久化文件名）</p><p>appendfsync always（每次修改执行同步）</p><p>appendfsync everysec（每秒执行一次同步）</p><p>appendfsync no（不同步）</p><p>appendfilename “appendonly.aof”（.aof名称）</p><h4 id="持久化文件"><a href="#持久化文件" class="headerlink" title="持久化文件"></a>持久化文件</h4><p>config get dir输出</p><ol><li>“dir”</li><li>“&#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379”</li></ol><p>将dump.rdb文件放到目录下会自动恢复</p><h4 id="集群、哨兵"><a href="#集群、哨兵" class="headerlink" title="集群、哨兵"></a>集群、哨兵</h4><p>单台最大内存不应该超过20gb，超过后一主三从</p><h5 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h5><p>只配置从库，不配置主库</p><p>info replication（查看当前库的信息）</p><h5 id="命令配置从节点SLAVEOF-IP-6379（暂时），修改从节点配置文件（永久）"><a href="#命令配置从节点SLAVEOF-IP-6379（暂时），修改从节点配置文件（永久）" class="headerlink" title="命令配置从节点SLAVEOF [IP] 6379（暂时），修改从节点配置文件（永久）"></a>命令配置从节点SLAVEOF [IP] 6379（暂时），修改从节点配置文件（永久）</h5><p>replicaof <masterip> <masterport></p><p>masterauth <master-password></p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop</title>
      <link href="/2022/05/17/hadoop/"/>
      <url>/2022/05/17/hadoop/</url>
      
        <content type="html"><![CDATA[<h4 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h4><h5 id="确认java安装成功"><a href="#确认java安装成功" class="headerlink" title="确认java安装成功"></a>确认java安装成功</h5><pre class="line-numbers language-none"><code class="language-none">java -versionrpm -qa | grep jdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="卸载其他版本"><a href="#卸载其他版本" class="headerlink" title="卸载其他版本"></a>卸载其他版本</h5><pre class="line-numbers language-none"><code class="language-none">yum -y remove java...或者rpm -e --nodeps jdk...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><span id="more"></span><h5 id="上传jdk1-8rpm安装包"><a href="#上传jdk1-8rpm安装包" class="headerlink" title="上传jdk1.8rpm安装包"></a>上传jdk1.8rpm安装包</h5><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\jdk-18_linux-x64_bin.rpm root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="执行安装jdk"><a href="#执行安装jdk" class="headerlink" title="执行安装jdk"></a>执行安装jdk</h5><pre class="line-numbers language-none"><code class="language-none">rpm -ivh jdk-8u333-linux-x64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认home路径：&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64</p><h5 id="添加环境变量文件到-x2F-etc-x2F-profile-d-x2F"><a href="#添加环境变量文件到-x2F-etc-x2F-profile-d-x2F" class="headerlink" title="添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;"></a>添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;java.shexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64export CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h4><h5 id="上传Hadoop压缩包"><a href="#上传Hadoop压缩包" class="headerlink" title="上传Hadoop压缩包"></a>上传Hadoop压缩包</h5><pre class="line-numbers language-none"><code class="language-none">scp E:\app\Linux\hadoop-2.10.1.tar.gz root@192.168.200.99:&#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;usr&#x2F;hadooptar -zxvf hadoop-2.10.1.tar.gz -C &#x2F;usr&#x2F;hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认home路径：&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1</p><h5 id="添加环境变量文件到-x2F-etc-x2F-profile-d-x2F-1"><a href="#添加环境变量文件到-x2F-etc-x2F-profile-d-x2F-1" class="headerlink" title="添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;"></a>添加环境变量文件到&#x2F;etc&#x2F;profile.d&#x2F;</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;profile.d&#x2F;hadoop.shexport HADOOP_HOME&#x3D;&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbinsource &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>验证</p><pre class="line-numbers language-none"><code class="language-none">hadoop versionwhereis hdfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="创建HDFS数据目录"><a href="#创建HDFS数据目录" class="headerlink" title="创建HDFS数据目录"></a>创建HDFS数据目录</h5><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;var&#x2F;HDFSdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件位置：&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;</p><p><a href="https://hadoop.apache.org/docs/r2.10.1/hadoop-project-dist/hadoop-common/SingleCluster.html">官方配置说明</a></p><h5 id="为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题"><a href="#为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题" class="headerlink" title="为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题"></a>为Hadoop提供Java解释器路径信息，主要解决远程访问Hadoop是Javahome无法继承的问题</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;hadoop-env.sh# The java implementation to use.export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default（rpm安装路径）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="为yarn任务，资源管理器提供Java运行环境"><a href="#为yarn任务，资源管理器提供Java运行环境" class="headerlink" title="为yarn任务，资源管理器提供Java运行环境"></a>为yarn任务，资源管理器提供Java运行环境</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;yarn-env.sh# export JAVA_HOME&#x3D;&#x2F;home&#x2F;y&#x2F;libexec&#x2F;jdk1.6.0&#x2F;if [ &quot;$JAVA_HOME&quot; !&#x3D; &quot;&quot; ]; then  #echo &quot;run java in $JAVA_HOME&quot;  JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default(这一步还是修改Javahome)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Hadoop核心文件配置-指定文件系统"><a href="#Hadoop核心文件配置-指定文件系统" class="headerlink" title="Hadoop核心文件配置(指定文件系统)"></a>Hadoop核心文件配置(指定文件系统)</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;core-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;        &lt;value&gt;hdfs:&#x2F;&#x2F;localhost:9000&lt;&#x2F;value&gt;#修改localhost    &lt;&#x2F;property&gt;    &lt;property&gt;        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;        &lt;value&gt;&#x2F;var&#x2F;HDFSdata&lt;&#x2F;value&gt;#HDFS数据目录    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置hdfs默认的数据存放策略"><a href="#配置hdfs默认的数据存放策略" class="headerlink" title="配置hdfs默认的数据存放策略"></a>配置hdfs默认的数据存放策略</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;        &lt;value&gt;2&lt;&#x2F;value&gt;#hdfs副本数，大于1    &lt;&#x2F;property&gt;    &lt;property&gt;        &lt;name&gt;dfs.namenode.secondary.http-address&lt;&#x2F;name&gt;        &lt;value&gt;node3:50090&lt;&#x2F;value&gt;#指定node3为secondary    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="从模板拷贝mapreduce配置文件，配置任务调度策略"><a href="#从模板拷贝mapreduce配置文件，配置任务调度策略" class="headerlink" title="从模板拷贝mapreduce配置文件，配置任务调度策略"></a>从模板拷贝mapreduce配置文件，配置任务调度策略</h5><pre class="line-numbers language-none"><code class="language-none">cp &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml.template &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xmlvim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt;        &lt;value&gt;yarn&lt;&#x2F;value&gt;    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置yarn资源管理角色"><a href="#配置yarn资源管理角色" class="headerlink" title="配置yarn资源管理角色"></a>配置yarn资源管理角色</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;yarn-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;yarn.nodemanager.aux-services&lt;&#x2F;name&gt;        &lt;value&gt;mapreduce_shuffle&lt;&#x2F;value&gt;#表示结构随机    &lt;&#x2F;property&gt;    &lt;property&gt;        &lt;name&gt;yarn.resourcemanager.hostname&lt;&#x2F;name&gt;        &lt;value&gt;node1&lt;&#x2F;value&gt;#指定资源调度者    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置datanode"><a href="#配置datanode" class="headerlink" title="配置datanode"></a>配置datanode</h5><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;slavesnode1node2node3.....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主节点单独执行"><a href="#主节点单独执行" class="headerlink" title="主节点单独执行"></a>主节点单独执行</h4><h5 id="格式化主节点hdfs"><a href="#格式化主节点hdfs" class="headerlink" title="格式化主节点hdfs"></a>格式化主节点hdfs</h5><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;bin&#x2F;hdfs namenode-formatls &#x2F;var&#x2F;HDFSdata&#x2F;dfs&#x2F;name&#x2F;current&#x2F;#查看imagecd &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.10.1&#x2F;sbin&#x2F;start-dfs.shstart-yarn.sh#启动集群jps#查看<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="访问网址"><a href="#访问网址" class="headerlink" title="访问网址"></a>访问网址</h5><pre class="line-numbers language-none"><code class="language-none">主节点IP:50070#hdfshdfs dfs -mkdir &#x2F;test主节点IP:8088#yarn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2022/05/16/RabbitMQ/"/>
      <url>/2022/05/16/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<p><strong>分布式消息中间件</strong></p><h3 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h3><h5 id="添加具有依赖项的存储库"><a href="#添加具有依赖项的存储库" class="headerlink" title="添加具有依赖项的存储库"></a>添加具有依赖项的存储库</h5><pre class="line-numbers language-none"><code class="language-none">yum install epel-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><span id="more"></span><h4 id="在线安装依赖环境"><a href="#在线安装依赖环境" class="headerlink" title="在线安装依赖环境"></a>在线安装依赖环境</h4><pre class="line-numbers language-none"><code class="language-none">yum install socat build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本机传送文件<code>scp E:\app\Linux\* root@192.168.200.99:/opt</code></p><ul><li><h5 id="安装-Erlang-RabbitMQ与Erlang-Versions需要对应"><a href="#安装-Erlang-RabbitMQ与Erlang-Versions需要对应" class="headerlink" title="安装 Erlang(RabbitMQ与Erlang Versions需要对应)"></a>安装 Erlang(RabbitMQ与Erlang Versions需要对应)</h5><p><a href="https://www.rabbitmq.com/which-erlang.html">rabbitmq对照表</a></p><p><a href="https://www.erlang-solutions.com/downloads/">Erlang</a></p><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/">RabbitMQ</a></p></li></ul><pre class="line-numbers language-none"><code class="language-none">rpm -ivh esl-erlang_23.3.4.5-1_centos_7_amd64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装rabbitmq以及运行和查看状态"><a href="#安装rabbitmq以及运行和查看状态" class="headerlink" title="安装rabbitmq以及运行和查看状态"></a>安装rabbitmq以及运行和查看状态</h4><pre class="line-numbers language-none"><code class="language-none">rpm -ivh rabbitmq-server-3.9.16-1.el7.noarch.rpm（版本需要与erlang对应）&#x2F;sbin&#x2F;service rabbitmq-server start&#x2F;sbin&#x2F;service rabbitmq-server status&#x2F;sbin&#x2F;service rabbitmq-server stopchkconfig rabbitmq-server on#开机自启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="开启管理页面"><a href="#开启管理页面" class="headerlink" title="开启管理页面"></a>开启管理页面</h5><pre class="line-numbers language-none"><code class="language-none">rabbitmq-plugins enable rabbitmq_management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就可以使用linux的ip地址:15672去访问了 用户名密码<code>guest</code>只可以本地访问</p><h5 id="新增用户与权限-主节点执行"><a href="#新增用户与权限-主节点执行" class="headerlink" title="新增用户与权限(主节点执行)"></a>新增用户与权限(主节点执行)</h5><pre class="line-numbers language-none"><code class="language-none">rabbitmqctl add_user admin admin#添加账号rabbitmqctl set_user_tags admin administrator#设置用户角色rabbitmqctl set_permissions -p &#x2F; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;#设置用户权限rabbitmqctl change_password admin 123456#更改密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1. administrator：可以登录控制台查看所有信息，可以对rabbitmq进行管理2. monitoring：监控者，登录控制台，查看所有信息3. policymaker：策略制定者，登录控制台，指定策略4. management：普通管理员，登录控制台<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>hosts与防火墙需要提前设置</p><p>确保各个节点的cookie文件使用的是同一个值(</p><h5 id="主节点执行"><a href="#主节点执行" class="headerlink" title="主节点执行"></a>主节点执行</h5><pre class="line-numbers language-none"><code class="language-none">scp -p &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie  root@node2:&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookiescp -p &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie  root@node3:&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="杀报错端口进程-从节点执行"><a href="#杀报错端口进程-从节点执行" class="headerlink" title="杀报错端口进程(从节点执行)"></a>杀报错端口进程(从节点执行)</h5><pre class="line-numbers language-none"><code class="language-none">netstat -lnp | grep 25672kill -9 xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="组成集群服务：所有节点执行"><a href="#组成集群服务：所有节点执行" class="headerlink" title="组成集群服务：所有节点执行"></a>组成集群服务：所有节点执行</h5><pre class="line-numbers language-none"><code class="language-none">rabbitmq-server -detached<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="从节点执行-加入集群"><a href="#从节点执行-加入集群" class="headerlink" title="从节点执行(加入集群)"></a>从节点执行(加入集群)</h5><pre class="line-numbers language-none"><code class="language-none">rabbitmqctl stop_app#停止MQ服务rabbitmqctl reset#重置MQrabbitmqctl join_cluster rabbit@node1#加入主节点rabbitmqctl start_app#只启动应用服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h5><pre class="line-numbers language-none"><code class="language-none">rabbitmqctl cluster_status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="集群移除从节点："><a href="#集群移除从节点：" class="headerlink" title="集群移除从节点："></a>集群移除从节点：</h4><ol><li>&#96;&#96;&#96;<br>停止从节点服务并重置<br>rabbitmqctl stop_app<br>rabbitmqctl reset<pre class="line-numbers language-none"><code class="language-none">2. &#96;&#96;&#96;   主节点上移除从节   rabbitmqctl forget_cluster_node rabbit@主机名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>配置文件位置</p><p>&#x2F;usr&#x2F;lib&#x2F;rabbitmq&#x2F;lib&#x2F;rabbitmq_server-3.9.16&#x2F;sbin</p><p>&#x2F;etc&#x2F;rabbitmq&#x2F;rabbitmq.conf</p><p>cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;rabbitmq-server-3.9.16&#x2F;</p><p>日志文件cat &#x2F;var&#x2F;log&#x2F;rabbitmq&#x2F;<a href="mailto:&#114;&#x61;&#x62;&#98;&#x69;&#x74;&#64;&#x6e;&#x6f;&#100;&#101;&#48;&#51;&#x2e;&#x6c;&#111;&#x67;">&#114;&#x61;&#x62;&#98;&#x69;&#x74;&#64;&#x6e;&#x6f;&#100;&#101;&#48;&#51;&#x2e;&#x6c;&#111;&#x67;</a></p><p>rabbitmq 诊断状态命令：rabbitmq-diagnostics status</p><p>要检查特定节点的位置，包括远程运行的节点，请使用 -n（–node 的缩写）开关：</p><p>rabbitmq-diagnostics status -n [node name]</p><pre class="line-numbers language-none"><code class="language-none">Config files * &#x2F;etc&#x2F;rabbitmq&#x2F;advanced.config * &#x2F;etc&#x2F;rabbitmq&#x2F;rabbitmq.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu基础环境</title>
      <link href="/2022/05/15/ubuntu18.04%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/05/15/ubuntu18.04%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>开启root账号</p><pre class="line-numbers language-none"><code class="language-none">sudo passwd root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1，ssh*<br>使本机开放SSH服务安装openssh-server：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后确认sshserver是否启动了：</p><pre class="line-numbers language-none"><code class="language-none">ps -e |grep ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2，向日葵</p><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl-cdn.oray.com&#x2F;sunlogin&#x2F;linux&#x2F;sunloginclientshell-10.1.1.28779-amd64.debsudo dpkg -i 文件名.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>vlc，macast，mpv，向日葵，洛雪，Alarm clock，网易云音乐，ssh</p><p>重启：sudo reboot</p>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2022/05/14/Nginx/"/>
      <url>/2022/05/14/Nginx/</url>
      
        <content type="html"><![CDATA[<p>负载均衡中间件 反向代理</p><p>cd &#x2F;usr&#x2F;local&#x2F;<br>mkdir nginx<br>cd nginx<br>tar zxvf &#x2F;root&#x2F;nginx-1.17.10.tar.gz -C .&#x2F;<br>yum -y install pcre-devel<br>yum -y install openssl openssl-devel<br>cd nginx-1.17.10<br>.&#x2F;configure<br>make &amp;&amp; make install<br>    安装完成后， Nginx的可执⾏⽂件位置位于&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx<br>    启动NGINX<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx<br>    停⽌Nginx服务<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop<br>    重新加载Nginx<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload<br>    配置⽂件位于&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepin基础环境搭建</title>
      <link href="/2022/05/13/deepin%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/05/13/deepin%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>安装ssh</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install openssh-serversudo &#x2F;etc&#x2F;init.d&#x2F;ssh start#启动ssh服务sudo systemctl enable ssh#设置开机自启动sudo systemctl disable ssh#关闭ssh开机自动启动命令sudo systemctl start ssh#单次开启sshsudo systemctl stop ssh#单次关闭ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装vnc</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install x11vncx11vnc -storepasswd#初始化密码Write password to &#x2F;home&#x2F;kqgeo&#x2F;.vnc&#x2F;passwd?#提示密码存储位置x11vnc -forever -shared -rfbauth &#x2F;home&#x2F;kqgeo&#x2F;.vnc&#x2F;passwdx11vnc#启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>x11vnc</title>
      <link href="/2022/05/12/centos7_x11vnc/"/>
      <url>/2022/05/12/centos7_x11vnc/</url>
      
        <content type="html"><![CDATA[<p><strong>在线安装</strong></p><pre class="line-numbers language-none"><code class="language-none">yum install epel-release#添加源epel.repoyum install -y x11vnc#安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><pre class="line-numbers language-none"><code class="language-none">x11vnc -storepasswdmv ~&#x2F;.vnc&#x2F;passwd &#x2F;root&#x2F;.vnc&#x2F;x11vnc.pwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><span id="more"></span><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;x11vnc.service[Unit]Description&#x3D;Remote desktop service (VNC)Requires&#x3D;display-manager.serviceAfter&#x3D;display-manager.service[Service]Type&#x3D;forkingExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;x11vnc -display :0 -forever -shared -bg -rfbauth &#x2F;root&#x2F;.vnc&#x2F;x11vnc.pwd -o &#x2F;var&#x2F;log&#x2F;x11vnc.logExecStop&#x3D;&#x2F;usr&#x2F;bin&#x2F;killall x11vncRestart&#x3D;on-failureRestartSec&#x3D;5[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动开机服务服务"><a href="#启动开机服务服务" class="headerlink" title="启动开机服务服务"></a>启动开机服务服务</h4><pre class="line-numbers language-none"><code class="language-none">systemctl daemon-reloadsystemctl enable x11vnc.servicesystemctl start x11vnc.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="关防火墙"><a href="#关防火墙" class="headerlink" title="关防火墙"></a>关防火墙</h4><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld.servicesystemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre class="line-numbers language-none"><code class="language-none">vncserver -list#查看当前用户开了多少个vncserverps -ef |grep vnc#查看其他用户vncserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> vnc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arch安装</title>
      <link href="/2022/05/10/arch%E5%AE%89%E8%A3%85/"/>
      <url>/2022/05/10/arch%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>光盘引导，特殊情况需要固定IP</p><h4 id="引导界面操作"><a href="#引导界面操作" class="headerlink" title="引导界面操作"></a>引导界面操作</h4><pre class="line-numbers language-none"><code class="language-none">ip addr change 192.168.200.94&#x2F;24 dev ens192#固定IPip route add default via 192.168.200.254#设置网关<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果可以ping通网关,然后登不上网页的话就是dns的问题，</p><p>在&#x2F;etc&#x2F;resolv.conf里面加一行nameserver 8.8.8.8</p><span id="more"></span><pre class="line-numbers language-none"><code class="language-none">passwd#设个密码远程timedatectl set-ntp true#同步时间pacman -Syy#更新镜像源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>磁盘分区</p><pre class="line-numbers language-none"><code class="language-none">fdisk -lfdisk &#x2F;dev&#x2F;sda#查看磁盘n#新建，一直回车保持默认p#查看w#保存mkfs.ext4 &#x2F;dev&#x2F;sda1#格式化分区mount &#x2F;dev&#x2F;sda1 &#x2F;mnt#挂载分区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择镜像源</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlistj和k上下移动光标dd剪切当前行yy复制一行p粘贴到光标位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者直接添加如下配置</p><pre class="line-numbers language-none"><code class="language-none">## ChinaServer &#x3D; https:&#x2F;&#x2F;mirrors.bfsu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.cqu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.dgut.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.neusoft.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.nju.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirror.redrock.team&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.sjtug.sjtu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;mirrors.xjtu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装基本Linux包</p><pre class="line-numbers language-none"><code class="language-none">pacetrap &#x2F;mnt base base-devel linux linux-firmware dhcpcdgenfstab -L &#x2F;mnt &gt;&gt; &#x2F;mnt&#x2F;etc&#x2F;fstabcat &#x2F;mnt&#x2F;etc&#x2F;fstabarch-chroot &#x2F;mntln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtimehwclock --systohcpacman -S vim dialog wpa_supplicant ntfs-3g networkmanager netctl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改语言</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;locale.gen命令行模式输入:&#x2F;zh查找x删除激活这4个zh_CN.UTF-8 UTF-8zh_HK.UTF-8 UTF-8zh_TW.UTF-8 UTF-8en_US.UTF-8 UTF-8执行locale-gen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;locale.confLANG&#x3D;en_US.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;hostnamevim &#x2F;etc&#x2F;hosts127.0.0.1localhost::1localhost127.0.1.1yi.localdomain yi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打补丁</p><pre class="line-numbers language-none"><code class="language-none">pacman -S intel-ucode#intelCPU补丁pacman -S os-prober ntfs-3gpacman -S grubgrub-install --target&#x3D;i386-pc &#x2F;dev&#x2F;sda1grub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>vim &#x2F;boot&#x2F;grub&#x2F;grub.cfg</p><p>exit</p><p>umount &#x2F;mnt</p><p>reboot</p><h4 id="硬盘启动"><a href="#硬盘启动" class="headerlink" title="硬盘启动"></a>硬盘启动</h4><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;swapfile bs&#x3D;1M count&#x3D;512 status&#x3D;progress</p><p>chmod 600 &#x2F;swapfile</p><p>mkswap &#x2F;swapfile</p><p>swapon &#x2F;swapfile</p><p>vim &#x2F;etc&#x2F;fstab</p><p>最下面插入一行</p><p>&#x2F;swapfile none swap defaults 0 0</p><p>新建普通用户</p><p>useradd -m -G wheel yi</p><p>passwd yi</p><p>pacman -S sudo</p><p>ln -s &#x2F;usr&#x2F;bin&#x2F;vim &#x2F;usr&#x2F;bin&#x2F;vi</p><p>visudo</p><p>注释掉# %wheel ALL&#x3D;(ALL)ALL</p><p>切换到yi用户</p><p>su yi</p><p>sudo vim &#x2F;etc&#x2F;pacman.conf</p><p>注释掉multilib并在下方加入</p><p>[archlinuxcn]</p><p>Server &#x3D; <a href="https://repo.archlinuxcn.org/$arch">https://repo.archlinuxcn.org/$arch</a></p><p>sudo pacman -Syy更新源</p><p>sudo pacman -S archlinuxcn-keyring</p><p>sudo pacman -S  xf86-video-intel mesaintel核显用户</p><p>sudo pacman -S xorg plasma kde-applications sddm network-manager-applet</p><p>sudo systemctl enable sddm</p><p>sudo systemctl disable netctl</p><p>sudo systemctl enable NteworkManager</p><p>reboot</p><p>终端操作</p><p>安装vmtools。。。</p><pre class="line-numbers language-none"><code class="language-none">root下依次执行下面命令for x in &#123;0..6&#125;; do mkdir -p &#x2F;etc&#x2F;init.d&#x2F;rc$&#123;x&#125;.d; donemount &#x2F;dev&#x2F;cdrom &#x2F;mnttar xf &#x2F;mnt&#x2F;VMwareTools*.tar.gz -C &#x2F;rootperl &#x2F;root&#x2F;vmware-tools-distrib&#x2F;vmware-install.pl创建文件&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vmwaretools.servicevim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vmwaretools.service[Unit] Description&#x3D;VMWare Tools daemon [Service] ExecStart&#x3D;&#x2F;etc&#x2F;init.d&#x2F;vmware-tools start ExecStop&#x3D;&#x2F;etc&#x2F;init.d&#x2F;vmware-tools stop PIDFile&#x3D;&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;vmware TimeoutSec&#x3D;0 RemainAfterExit&#x3D;yes [Install] WantedBy&#x3D;multi-user.target设置开机启动systemctl enable vmwaretools.serviceXorg设置pacman -S xf86-input-vmmouse xf86-video-vmware mesavim &#x2F;etc&#x2F;X11&#x2F;Xwrapper.configneeds_root_rights&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装ssh并开机自启</p><pre class="line-numbers language-none"><code class="language-none">sudo pacman -S wqy-microhei wqy-microhei-lite wqy-bitmapfont wqy-zenhei ttf-arphic-ukai ttf-arphic-uming adobe-source-han-sans-cn-fonts noto-fonts-cjk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装非官方源</p><p>sudo pacman -S git</p><p>git clone <a href="https://aur.archlinux.org/yay.git">https://aur.archlinux.org/yay.git</a></p><p>cd yay</p><p>makepkg -si</p><p>sudo vim &#x2F;etc&#x2F;locale.conf</p><p>LANG&#x3D;zh_CN.UTF-8</p>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crontab</title>
      <link href="/2022/05/09/crontab/"/>
      <url>/2022/05/09/crontab/</url>
      
        <content type="html"><![CDATA[<p>cron服务是Linux的内置服务，但它不会开机自动启动。可以用以下命令启动和停止服务：<br>&#x2F;sbin&#x2F;service crond start<br>&#x2F;sbin&#x2F;service crond stop<br>&#x2F;sbin&#x2F;service crond restart<br>&#x2F;sbin&#x2F;service crond reload<br>以上1-4行分别为启动、停止、重启服务和重新加载配置。</p><span id="more"></span> <p>要把cron设为在开机的时候自动启动，在 &#x2F;etc&#x2F;rc.d&#x2F;rc.local 脚本中加入 &#x2F;sbin&#x2F;service crond start 即可</p><p>查看当前用户的crontab，输入 crontab -l<br>编辑crontab，输入 crontab -e<br>删除crontab，输入 crontab -r</p><p>00 12 * * 1 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;雾.mp3<br>00 12 * * 2 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;雾.mp3<br>00 12 * * 3 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;雾.mp3<br>00 12 * * 4 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;雾.mp3<br>00 12 * * 5 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;雾.mp3<br>30 13 * * 1 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;1_The\ Rain.mp3<br>30 13 * * 2 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;2_城南花已开.mp3<br>30 13 * * 3 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;3_いつも何度でも.mp3<br>30 13 * * 4 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;4_Sentient.mp3<br>30 13 * * 5 totem &#x2F;home&#x2F;kqgeo&#x2F;音乐&#x2F;5_勿念他归.mp3</p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 自动任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos彻底卸载软件</title>
      <link href="/2022/05/08/centos%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/"/>
      <url>/2022/05/08/centos%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>停服务</p><pre class="line-numbers language-none"><code class="language-none">service xx-server stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卸组件</p><pre class="line-numbers language-none"><code class="language-none">yum list | grep xxyum -y remove<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要删除的数据目录</p><pre class="line-numbers language-none"><code class="language-none">rm -rf &#x2F;var&#x2F;lib&#x2F;xx&#x2F;*rm -rf &#x2F;etc&#x2F;xx&#x2F;*rm -rf &#x2F;usr&#x2F;lib&#x2F;xx&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible</title>
      <link href="/2022/05/07/ansible/"/>
      <url>/2022/05/07/ansible/</url>
      
        <content type="html"><![CDATA[<h3 id="构建密钥对验证的SSH体系"><a href="#构建密钥对验证的SSH体系" class="headerlink" title="构建密钥对验证的SSH体系"></a>构建密钥对验证的SSH体系</h3><p>整个过程包括四步</p><p>首先要在SSH客户端以greg用户身份创建密钥对，</p><p>并且要将创建的公钥文件上传至SSH服务器端，</p><p>然后要将公钥信息导入服务器端的目标用户root的公钥数据库，</p><p>最后以服务器端用户root的身份登录验证。</p><span id="more"></span> <h4 id="1、在客户端创建密钥对"><a href="#1、在客户端创建密钥对" class="headerlink" title="1、在客户端创建密钥对"></a>1、在客户端创建密钥对</h4><p>在客户端中，通过ssh-keygen工具为当前用户创建密钥对文件。</p><p>可用的加密算法为ECDSA、DSA或RSA（ssh-keygen命令的“-t”选项用于指定算法类型）。</p><p><code>ssh-keygen -t rsa</code><!--创建密钥对-->全部保持默认</p><p>ls -lh ~&#x2F;.ssh&#x2F;id_rsa*<!--确认生成的密钥文件--></p><p>id_rsa是私钥文件，权限默认为600</p><p>id_rsa.pub是公钥文件，用来提供给ssh服务器。</p><h4 id="2、将公钥文件上传至服务器"><a href="#2、将公钥文件上传至服务器" class="headerlink" title="2、将公钥文件上传至服务器"></a>2、将公钥文件上传至服务器</h4><p>将上一步生成的公钥文件上传至服务器，并部署到服务器端用户的公钥数据库中。上传公钥文件时可以选择SCP、FTP、HTTP甚至发送E-mail等任何方式。</p><p><code>ssh-copy-id -i ./.ssh/id_rsa.pub root@192.168.200.99</code><!--将公钥文件上传至服务器并导入公钥文本--></p><p>yes输入<a href="mailto:&#x72;&#111;&#111;&#116;&#64;&#49;&#x39;&#50;&#x2e;&#49;&#54;&#x38;&#46;&#50;&#48;&#x30;&#x2e;&#57;&#57;">&#x72;&#111;&#111;&#116;&#64;&#49;&#x39;&#50;&#x2e;&#49;&#54;&#x38;&#46;&#50;&#48;&#x30;&#x2e;&#57;&#57;</a>密码</p><h4 id="3、在客户端使用密钥对验证"><a href="#3、在客户端使用密钥对验证" class="headerlink" title="3、在客户端使用密钥对验证"></a>3、在客户端使用密钥对验证</h4><p>当私钥文件（客户端）、公钥文件（服务器）均部署到位以后，就可以在客户端中进行测试了。</p><p><code>ssh root@192.168.200.99</code></p><h3 id="安装ansible"><a href="#安装ansible" class="headerlink" title="安装ansible"></a>安装ansible</h3><p>使用yum安装</p><p><code>yum install epel-release -y</code><!--先安装源--></p><p><code>yum install ansible –y</code></p><p><code>ansible --version</code><!--验证--></p><h3 id="Ansible配置"><a href="#Ansible配置" class="headerlink" title="Ansible配置"></a>Ansible配置</h3><p>Inventory是Ansible管理主机信息的配置文件，相当于系统Hosts文件的功能，默认存放在&#x2F;etc&#x2F;ansible&#x2F;hosts。在hosts文件中，通过分组来组织设备，Ansible通过Inventory来定义主机和分组，通过在ansible命令中使用选项-i或–inventory-file来指定Inventory。</p><p><code>ansible -i /etc/ansible/hosts web -m ping</code></p><p>如果使用默认的Inventory文件（&#x2F;etc&#x2F;ansible&#x2F;hosts），也可以不指定Inventory文件，例如：</p><p><code>ansible web -m ping</code></p><p>Ansible通过设备列表以分组的方式添加到&#x2F;etc&#x2F;ansible&#x2F;hosts文件来实现对设备的管理，所以在正式管理之前，首先要编写好hosts文件。hosts文件中，以[ ]包含的部分代表组名，设备列表支持主机名和IP地址。默认情况下，通过访问22端口（SSH）来管理设备。若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口标明，以行为单位分隔配置。另外，hosts文件还支持通配符。</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;ansible&#x2F;hosts[web]192.168.200.98192.168.200.97[test]node04:22                         &lt;!--通过22端口管理设备--&gt;[mail]yj1.kgc.cnyj[2:5].kgc.cn&lt;!--[2:5]表示2~5之间的所有数字，即表示yj2.kgc.cn、yj3.kgc.cn……的所有主机--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件</p><p>&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg</p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 红帽认证 </tag>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA</title>
      <link href="/2022/05/06/centos7%E5%AE%89%E8%A3%85java/"/>
      <url>/2022/05/06/centos7%E5%AE%89%E8%A3%85java/</url>
      
        <content type="html"><![CDATA[<p>监测java是否存在</p><pre class="line-numbers language-none"><code class="language-none">java -versionrpm -qa | grep jdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>卸载</p><pre class="line-numbers language-none"><code class="language-none">rpm -e --nodeps jdk...yum -y remove java...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><span id="more"></span><h3 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h3><p><code>rpm -ivh jdk-8u333-linux-x64.rpm</code></p><h3 id="解压缩安装"><a href="#解压缩安装" class="headerlink" title="解压缩安装"></a>解压缩安装</h3><p><code>tar -zxvf  jdk-8u333-linux-x64.tar.gz</code> <code>vim /etc/profile</code></p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1....export CLASSPATH&#x3D;%JAVA_HOME%&#x2F;lib;%JAVA_HOME%&#x2F;jre&#x2F;lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>source /etc/profile</code></p><h3 id="yum在线安装"><a href="#yum在线安装" class="headerlink" title="yum在线安装"></a>yum在线安装</h3><p><code>yum list java-1.8*</code></p><p><code>yum install java-1.8.0-openjdk* -y</code>ji</p><p>默认路径：&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_333-amd64&#x2F;</p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker_RabbitMQ</title>
      <link href="/2022/05/05/Docker_RabbitMQ/"/>
      <url>/2022/05/05/Docker_RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>安装软件包（提供实用程序）并设置<strong>稳定的</strong>存储库。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install -y yum-utils$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span> <h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><ol><li><p>安装<em>最新版本</em>的 Docker 引擎、容器和 Docker Compose，或转到下一步以安装特定版本：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 Docker。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过运行映像来验证 Docker 引擎是否已正确安装。<code>hello-world</code></p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。</p></li></ol><h4 id="卸载-Docker-引擎"><a href="#卸载-Docker-引擎" class="headerlink" title="卸载 Docker 引擎"></a>卸载 Docker 引擎</h4><ol><li><p>卸载 Docker 引擎、CLI、Containerd 和 Docker Compose 包：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum remove docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有映像、容器和卷：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p><del>创建工作目录</del></p><p><code>mkdir ~/.RabbitMQ &amp;&amp; cd ~/.RabbitMQ</code></p><pre class="line-numbers language-none"><code class="language-none">mkdir -p ~&#x2F;.rabbitmq&#x2F;&#123;etc,lib,var&#x2F;&#123;lib,log&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="拉取最新docker镜像，"><a href="#拉取最新docker镜像，" class="headerlink" title="拉取最新docker镜像，"></a>拉取最新docker镜像，</h4><pre class="line-numbers language-none"><code class="language-none">docker pull rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看端口是否被占用，</p><pre class="line-numbers language-none"><code class="language-none">yum install lsoflsof -i:15672<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建容器</p><pre class="line-numbers language-none"><code class="language-none">docker run -di --name myrabbit -e RABBITMQ_DEFAULT_USER&#x3D;admin -e RABBITMQ_DEFAULT_PASS&#x3D;admin -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">-di：创建一个守护式容器–name：为容器指定一个名称-e：添加环境变量-p：端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置。-v： 工作目录映射。形式为：-v 宿主机路径:&#x2F;root&#x2F;.halo，后者不能修改。–unless-stoppedt： 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>停止并删除当前运行中的容器</li></ul><p><code>docker stop myrabbit</code></p><p><code>docker ps -a</code></p><p><code>docker rm -f myrabbit</code></p><p><code>rm -rf ~/.myrabbit</code>     # 完全删除映射到本地的数据</p><ul><li>备份数据</li></ul><p><code>cp -r ~/.myrabbit ~/.myrabbit.backup</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker_Nginx</title>
      <link href="/2022/05/04/Docker_Nginx/"/>
      <url>/2022/05/04/Docker_Nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>安装软件包（提供实用程序）并设置<strong>稳定的</strong>存储库。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install -y yum-utils$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span> <h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><ol><li><p>安装<em>最新版本</em>的 Docker 引擎、容器和 Docker Compose，或转到下一步以安装特定版本：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 Docker。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过运行映像来验证 Docker 引擎是否已正确安装。<code>hello-world</code></p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。</p></li></ol><h4 id="卸载-Docker-引擎"><a href="#卸载-Docker-引擎" class="headerlink" title="卸载 Docker 引擎"></a>卸载 Docker 引擎</h4><ol><li><p>卸载 Docker 引擎、CLI、Containerd 和 Docker Compose 包：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum remove docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有映像、容器和卷：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>创建工作目录</p><p><code>mkdir ~/.Nginx &amp;&amp; cd ~/.Nginx</code></p><p>安装 Docker Compose。</p><pre class="line-numbers language-none"><code class="language-none">curl -L https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.5.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composechmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个docker-compose.yml文件</p><pre class="line-numbers language-none"><code class="language-none">version: &#39;3&#39;services:  app:    image: &#39;chishin&#x2F;nginx-proxy-manager-zh:latest&#39;    restart: always    ports:      - &#39;80:80&#39;      - &#39;81:81&#39;      - &#39;443:443&#39;    volumes:      - .&#x2F;data:&#x2F;data      - .&#x2F;letsencrypt:&#x2F;etc&#x2F;letsencrypt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署运行</p><p><code>docker-compose up -d</code></p><p>默认管理员信息</p><pre class="line-numbers language-none"><code class="language-none">Email:    admin@example.comPassword: changeme<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>快速升级</p><pre class="line-numbers language-none"><code class="language-none">docker-compose downdocker-compose pulldocker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>docker pull chishin/nginx-proxy-manager-zh</code></p><p><code>docker stop NPMz</code></p><p><code>docker rm -f NPMz</code></p><ul><li>备份数据</li></ul><p><code>cp -r ~/.Nginx ~/.Nginx.backup</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker_hexo</title>
      <link href="/2022/05/03/Docker_hexo/"/>
      <url>/2022/05/03/Docker_hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>安装软件包（提供实用程序）并设置<strong>稳定的</strong>存储库。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install -y yum-utils$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span> <h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><ol><li><p>安装<em>最新版本</em>的 Docker 引擎、容器和 Docker Compose，或转到下一步以安装特定版本：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 Docker。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过运行映像来验证 Docker 引擎是否已正确安装。<code>hello-world</code></p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。</p></li></ol><h4 id="卸载-Docker-引擎"><a href="#卸载-Docker-引擎" class="headerlink" title="卸载 Docker 引擎"></a>卸载 Docker 引擎</h4><ol><li><p>卸载 Docker 引擎、CLI、Containerd 和 Docker Compose 包：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum remove docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有映像、容器和卷：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>创建工作目录</p><p><code>mkdir ~/.hexo &amp;&amp; cd ~/.hexo</code></p><p>安装 Docker Compose。</p><pre class="line-numbers language-none"><code class="language-none">curl -L https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.5.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composechmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个docker-compose.yml文件</p><p><code>touch Dockerfile</code></p><pre class="line-numbers language-none"><code class="language-none"># node环境镜像FROM node:latest AS build-env# 创建hexo-blog文件夹且设置成工作文件夹RUN mkdir -p &#x2F;usr&#x2F;src&#x2F;hexo-blogWORKDIR &#x2F;usr&#x2F;src&#x2F;hexo-blog# 复制当前文件夹下面的所有文件到hexo-blog中COPY . .# 安装 hexo-cliRUN npm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org install hexo-cli -g &amp;&amp; npm install# 生成静态文件RUN hexo clean &amp;&amp; hexo g# 配置nginxFROM nginx:latestENV TZ&#x3D;Asia&#x2F;ShanghaiRUN ln -snf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;$TZ &#x2F;etc&#x2F;localtime &amp;&amp; echo $TZ &gt; &#x2F;etc&#x2F;timezoneWORKDIR &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html# 把上一部生成的HTML文件复制到Nginx中COPY --from&#x3D;build-env &#x2F;usr&#x2F;src&#x2F;hexo-blog&#x2F;public &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;htmlEXPOSE 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker_halo</title>
      <link href="/2022/05/02/Docker_halo/"/>
      <url>/2022/05/02/Docker_halo/</url>
      
        <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>安装软件包（提供实用程序）并设置<strong>稳定的</strong>存储库。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install -y yum-utils$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span> <h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><ol><li><p>安装<em>最新版本</em>的 Docker 引擎、容器和 Docker Compose，或转到下一步以安装特定版本：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 Docker。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过运行映像来验证 Docker 引擎是否已正确安装。<code>hello-world</code></p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。</p></li></ol><h4 id="卸载-Docker-引擎"><a href="#卸载-Docker-引擎" class="headerlink" title="卸载 Docker 引擎"></a>卸载 Docker 引擎</h4><ol><li><p>卸载 Docker 引擎、CLI、Containerd 和 Docker Compose 包：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo yum remove docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有映像、容器和卷：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>创建工作目录</p><p><code>mkdir ~/.halo &amp;&amp; cd ~/.halo</code></p><h4 id="自动"><a href="#自动" class="headerlink" title="自动"></a>自动</h4><p>下载示例配置文件到 工作目录</p><p><code>yum -y install wget</code></p><p><code>wget https://dl.halo.run/config/application-template.yaml -O ./application.yaml</code></p><h4 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h4><p>Halo 的配置文件名为 application.yaml，其必须位于工作目录 ~&#x2F;.halo 下。 Halo 会读取该目录下的配置文件进行加载。</p><p>如果您是单独下载的官方配置文件，则必须将文件名 application-template.yaml 重命名为 application.yaml</p><p>编辑配置文件，配置数据库或者端口等，</p><p><code>yum -y install vim</code></p><p><code>vim application.yaml</code></p><ul><li>默认的数据库账户和密码为 <code>admin</code> 和 <code>123456</code>，建议将其修改，并妥善保存（此用户名和密码在 Halo 第一次启动的时候将自动创建。并且不支持首次启动后，通过修改配置文件中的账户或者密码，如果修改，再次启动将提示用户名或者密码错误。）。</li><li>线上环境中，<code>h2</code> 的配置使用默认即可。如果需要手动修改一些数据，可将 <code>web-allow-others</code> 和 <code>enabled</code> 设为 <code>true</code> 来开启 h2 控制台，访问路径为 <code>ip:端口/h2-console</code>。<code>JDBC URL</code>，<code>username</code>，<code>password</code> 使用配置文件中的即可。</li><li>特别注意：在开启 <code>h2-console</code> 并完成所需操作之后，一定要再次关闭 <code>h2-console</code> 并重启，不要长时间将 <code>h2-console</code> 处于开启状态，这可能会有隐性的安全风险。</li></ul><p>mysql要求</p><ol><li>版本：5.7 +</li><li>字符集（Character Set）：<code>utf8mb4</code></li><li>排序规则（Collate）：<code>utf8mb4_bin</code></li><li>存储引擎：<code>InnoDB</code></li></ol><p>综上，建议创建数据库采用下面的命令：</p><p>create database halodb character set utf8mb4 collate utf8mb4_bin;</p><p><strong>注意事项</strong>：</p><ul><li><code>username</code> 及 <code>password</code> 需要修改为您的 MySQL 数据库账号和密码。</li><li>默认时区为 <code>Asia/Shanghai</code>，如果与您所在时区不一致，则可以修改为您所在的时区。</li></ul><p>Halo 支持自定义后台管理的<strong>根路径</strong>。</p><p><code> admin-path: admin</code></p><p>注意：仅为改动后台管理的根路径，因此前后不带 <code>/</code>。</p><p>将缓存数据持久化保存在本地。</p><p><code> cache: memory</code></p><p>目前支持三种策略：</p><ul><li><code>memory</code> 将数据缓存至内存，重启服务缓存将清空。</li><li><code>level</code> 将数据缓存至本地，重启服务不会清空缓存。</li><li><code>redis</code> 将数据缓存至 Redis，重启服务不会清空缓存，如需分布式部署 Halo，请选用此种缓存方式。</li></ul><p>如果选用 Redis 缓存方式，请在配置文件加入 Redis 相关配置，完整的配置示例如下：</p><pre class="line-numbers language-none"><code class="language-none">server:  port: 8090    # Response data gzip.  compression:    enabled: true    spring:  datasource:    # MySQL database configuration.    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;halodb?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&amp;allowPublicKeyRetrieval&#x3D;true    username: root    password: 123456  redis:    # Redis cache configuration.    port: 6379    database: 0    host: 127.0.0.1    password: 123456halo:  # Your admin client path is https:&#x2F;&#x2F;your-domain&#x2F;&#123;admin-path&#125;  admin-path: admin  # memory or level or redis  cache: redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启用压缩对于减少带宽和加快页面加载非常有用，在<strong>未使用</strong> <code>Nginx</code> 或 <code>Caddy</code> 等反向代理服务器时（反向代理服务器通常是默认开启 Gzip 的），可以考虑开启系统自带的 Gzip 功能。</p><pre class="line-numbers language-none"><code class="language-none">server:  # Response data gzip.  compression:    enabled: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[两种数据库示例]</p><h4 id="H2-Database"><a href="#H2-Database" class="headerlink" title="H2 Database"></a>H2 Database</h4><pre class="line-numbers language-none"><code class="language-none">server:  port: 8090  # Response data gzip.  compression:    enabled: truespring:  datasource:    # H2 database configuration.    driver-class-name: org.h2.Driver    url: jdbc:h2:file:~&#x2F;.halo&#x2F;db&#x2F;halo    username: admin    password: 123456  # H2 database console configuration.  h2:    console:      settings:        web-allow-others: false      path: &#x2F;h2-console      enabled: falsehalo:  # Your admin client path is https:&#x2F;&#x2F;your-domain&#x2F;&#123;admin-path&#125;  admin-path: admin  # memory or level or redis  cache: memory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><pre class="line-numbers language-none"><code class="language-none">server:  port: 8090  # Response data gzip.  compression:    enabled: truespring:  datasource:    # MySQL database configuration.    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;halodb?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&amp;allowPublicKeyRetrieval&#x3D;true    username: root    password: 123456halo:  # Your admin client path is https:&#x2F;&#x2F;your-domain&#x2F;&#123;admin-path&#125;  admin-path: admin  # memory or level or redis  cache: memory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拉取最新docker镜像，"><a href="#拉取最新docker镜像，" class="headerlink" title="拉取最新docker镜像，"></a>拉取最新docker镜像，</h3><p><code>docker pull halohub/halo</code></p><p>查看端口是否被占用，</p><p><code>yum install lsof</code></p><p><code>lsof -i:8090</code></p><p>创建容器</p><p><code>docker run -it -d --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=unless-stopped halohub/halo</code></p><pre class="line-numbers language-none"><code class="language-none">-it： 开启输入功能并连接伪终端-d： 后台运行容器–name： 为容器指定一个名称-p： 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置。-v： 工作目录映射。形式为：-v 宿主机路径:&#x2F;root&#x2F;.halo，后者不能修改。–restart： 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">重启策略配置要为容器配置重新启动策略，在使用docker run命令时使用--restart标志。--restart标志的值包括如下几种：1．no容器退出时，不自动重启容器。这是默认值。2．on-failure[:max-retries]当容器以非零状态码(正常退出时状态码为0)退出时，重新启动。max-retries为最大重试次数(可选)，限制Docker守护程序尝试的重新启动重试次数。如不指定最大重试次数，默认为不断重试。3．always无论退出状态如何，始终重新启动容器。Docker守护程序将无限期地尝试重新启动容器。无论容器的当前状态如何，容器也将始终在守护程序启动时启动。4．unless-stopped类似always，无论退出状态如何，重新启动容器。区别在：如果容器在Docker守护程序停止之前已经处于停止状态，那么守护程序启动时，容器不会重新启动。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反向代理</p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><pre class="line-numbers language-none"><code class="language-none">upstream halo &#123;  server 127.0.0.1:8090;&#125;server &#123;  listen 80;  listen [::]:80;  server_name www.yourdomain.com;  client_max_body_size 1024m;  location &#x2F; &#123;    proxy_pass http:&#x2F;&#x2F;halo;    proxy_set_header HOST $host;    proxy_set_header X-Forwarded-Proto $scheme;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>停止并删除当前运行中的容器</li></ul><p><code>docker stop halo</code></p><p><code>docker ps -a</code></p><p><code>docker rm -f halo</code></p><p><code>rm -rf ~/.halo</code>     # 完全删除映射到本地的数据</p><ul><li>备份数据</li></ul><p><code>cp -r ~/.halo ~/.halo.backup</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> halo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7基础命令</title>
      <link href="/2022/05/01/centos7%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/05/01/centos7%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ul><li>重新分配IP<code>dhclient</code></li><li>查看网卡信息<code>ifconfig</code> <code>ip addr</code></li><li>设置网络<code>vim /etc/sysconfig/network-scripts/ifcfg-eth0</code>(网卡号)<br>固定地址<code>BOOTPROTO=static</code>(none禁止DHCP，static启用静态IP地址，dhcp开启DHCP服务)</li><li>禁止IPV6<code>IPV6INIT=no</code></li><li>开机启动<code>ONBOOT=yes</code></li><li>静态IP地址<code>IPADDR=172.3.4.249</code></li><li>子网掩码(掩码长度)<code>NETMASK=255.255.255.0(PREFIX=24)</code></li><li>网关<code>GATEWAY=172.3.4.1</code></li><li>DNS<code>DNS1=218.104.111.114 DNS2=180.76.76.76</code></li><li>重启网络服务<code>systemctl restart network.service(service network restart)</code></li></ul><span id="more"></span><ul><li><ul><li>是否允许DHCP获得的DNS覆盖本地的DNS<code>PEERDNS</code></li><li>是否从DHCP服务器获取用于定义接口的默认网关的信息的路由表条目<code>PEERROUTES</code></li><li>唯一标识<code>UUID</code></li><li>如果ipv4配置失败禁用设备<code>IPV4_FAILURE_FATAL=yes</code></li><li>如果ipv6配置失败禁用设备<code>IPV6_FAILURE_FATAL=yes</code></li><li>定义设备名称<code>NAME=“eth 或 ens”</code></li><li>address表示广播地址<code>BROADCAST=“address”</code></li><li>MAC-address表示指定一个MAC地址<code>MACADDR=“MAC-address”</code></li><li>是否允许非root用户控制该设备<code>USERCTL=yes/no</code></li></ul></li><li><p>路由<code>ip route show</code></p></li><li><p>IP地址MAC地址<code>ip address show</code></p></li><li><p>网络信息<code>ip n</code> <code>ip -s l</code> <code>ss</code></p></li><li><p>主机信息<code>hostnamectl</code><br>vim &#x2F;etc&#x2F;hostname<br>vim &#x2F;etc&#x2F;hosts</p></li><li><p>查看系统版本<code>cat /etc/centos-release</code></p></li><li><p>se状态<code>sestatus</code><br>vim &#x2F;etc&#x2F;selinux&#x2F;config</p><ul><li>配置域名服务客户端的控制文件<code>/etc/host.conf</code></li><li>完成主机名映射为IP地址的功能<code>/etc/hosts</code></li><li>域名服务客户端的配置文件,用于指定域名服务器的位置<code>/etc/resolv.conf</code></li><li>包含了主机最基本的网络信息,用于系统启动<code>/etc/sysconfig/network</code></li><li>系统启动时初始化网络的一些信息以及网卡的配置文件<code>/etc/sysconfig/network-script/</code></li><li>定义了由超级进程xinetd启动的网络服务<code>/etc/xinetd.conf</code></li><li>完成域名与网络地址的映射<code>/etc/networks</code></li><li>设定了主机使用的协议以及各个协议的协议号<code>/etc/protocols</code></li><li>设定主机的不同端口的网络服务<code>/etc/services</code></li></ul></li><li><p>查看防火墙状态<code>systemctl status firewalld</code></p></li><li><p>查看防火墙开放了哪些端口<code>firewall-cmd --list-ports</code></p></li><li><p>开启防火墙<code>service firewalld start</code></p></li><li><p>开启端口（–zone作用域;–add-port&#x3D;80&#x2F;tcp添加端口，格式为:端口&#x2F;通讯协议;–permanent永久生效，没有此参数重启后失效）<code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code></p></li><li><p>重启防火墙<code>systemctl restart firewalld.service</code></p></li><li><p>关闭防火墙</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld.servicesystemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><ul><li><p>查看vim是否安装<code>rpm -qa|grep vim</code></p></li><li><p>在线安装个编辑器<code>yum -y install vim</code></p></li><li><p>安装本地rpm包<code>rpm -ivh xxx.rpm</code></p></li><li><p>强制卸载</p><pre class="line-numbers language-none"><code class="language-none">rpm -qa|grep xxxrpm -e --nodeps xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="使用终端远程登陆"><a href="#使用终端远程登陆" class="headerlink" title="使用终端远程登陆"></a>使用终端远程登陆</h3><ul><li><p>ssh空格@IP，cmd进入<code>ssh root@172.3.4.249</code></p><ul><li>1.tab键用于自动不全命令&#x2F;文件名&#x2F;目录名<br>2.ctrl+l清理终端显示<br>3.clear&#x2F;cls清理终端显示<br>4.ctrl+c终止当前操作</li></ul></li><li><p>scp (secure copy)#linux下基于ssh登录进行安全的远程文件拷贝命令</p><ul><li><p>递归复制整个目录<code>-r</code></p></li><li><p>详细方式输出<code>-v</code></p></li><li><p>不显示传输进度条<code>-q</code></p></li><li><p>允许压缩<code>-c</code></p><pre class="line-numbers language-none"><code class="language-none">scp -r &#x2F;usr&#x2F;local&#x2F;setup root@192.168.1.233:&#x2F;usr&#x2F;local&#x2F;scp 本地文件远程用户名@远程ip:远程文件夹&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><ul><li>使用vi打开文件，默认是命令模式，需要输入a&#x2F;i进入编辑模式，然后输入文本，按下esc键，回到命令模式<ul><li>强制保存退出<code>:wq!</code></li><li>写入write<code>w</code></li><li>退出quit<code>q</code></li><li>强制<code>!</code></li><li>保存退出<code>:x</code></li><li>删除光标位置的字符(X删除前一个)<code>x</code></li><li>查找字符串(n下一个N上一个)<code>/xx</code></li><li>复制几行<code>数字YY</code></li><li>剪切几行<code>数字DD</code></li><li>插入<code>P</code></li><li>撤销<code>u</code></li><li>编辑的数据另存为<code>:w [filename]</code></li><li>如果已改动保持并退出，未改动不存储离开<code>ZZ</code></li><li>显示行号(:set nonu相反)<code>:set nu</code></li></ul></li></ul><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><ul><li><p>服务启动<code>systemctl start service_name</code></p></li><li><p>服务停止<code>systemctl stop service_name</code></p></li><li><p>自启动<code>systemctl enable service_name</code></p><ul><li><code>systemctl disable service_name</code></li></ul></li><li><p>进程树<code>pstree -pu</code></p></li><li><p>查看所有进程<code>ps -aux|grep xx</code></p></li><li><p>查看父进程<code>ps -ef|grep xx</code></p></li><li><p>强制结束进程<code>kill -9 进程数字</code></p></li></ul><h3 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h3><ul><li><p>查看系统当前编码<code>vim /etc/locale.conf</code>永久使用中文</p><pre class="line-numbers language-none"><code class="language-none">LANG&#x3D;&quot;zh_CN.UTF-8&quot;LC_ALL&#x3D;&quot;zh_CN.UTF-8&quot;LC_CTYPE&#x3D;&quot;zh_CN.UTF-8&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h5 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h5><ul><li>新建文件夹<code>mkdir</code></li><li>递归创建目录，即使上级目录不存在，会按目录层级自动创建目录<code>mkdir -p</code></li><li>新建文本<code>vi</code> <code>vim</code> <code>touch</code></li></ul><h5 id="路径与属性"><a href="#路径与属性" class="headerlink" title="路径与属性"></a>路径与属性</h5><ul><li><p>返回上级目录(cd ..&#x2F;..)上上层<code>cd ..</code></p></li><li><p>进入绝对路径目录<code>cd /</code></p></li><li><p>进入用户根目录(cd)<code>cd ~</code></p></li><li><p>查看当前的路径<code>pwd</code></p></li><li><p>显示文件属性(ll)<code>ls -l</code></p><ul><li>查看包括隐藏文件在内的所有文件以及属性<code>ls -al</code></li></ul></li></ul><h5 id="移动（搬家）命令-gt-move-gt-mv"><a href="#移动（搬家）命令-gt-move-gt-mv" class="headerlink" title="移动（搬家）命令 &gt; move &gt; mv"></a>移动（搬家）命令 &gt; move &gt; mv</h5><ul><li><p>要移动的文件 目标地址<code>mv /home/xb.py  /tmp/ xb1.py</code></p><ul><li>文件或文件夹改名<code>mv xxx.log  xx.py</code></li></ul></li></ul><h5 id="删除-gt-remove-gt-rm"><a href="#删除-gt-remove-gt-rm" class="headerlink" title="删除 &gt; remove &gt; rm"></a>删除 &gt; remove &gt; rm</h5><ul><li>删除root目录下的xx文件夹<code>rm -rf /root/xx</code></li><li>删除etc&#x2F;yum.repos.d目录下的所有文件<code>rm -rf /etc/yum.repos.d/*</code></li><li>需要删除确认<code>-i</code></li><li>强制删除<code>-f</code></li><li>递归删除目录和内容<code>-r</code></li></ul><p></p><h5 id="复制-gt-copy-gt-cp"><a href="#复制-gt-copy-gt-cp" class="headerlink" title="复制 &gt; copy &gt; cp"></a>复制 &gt; copy &gt; cp</h5><ul><li><p>复制 xxx.txt 到 &#x2F;tmp目录下<code>cp xxx.txt /tmp</code></p></li><li><p>复制 xxx.txt 顺便改名为 xb.txt<code>cp xxx.txt /tmp/xb.txt</code></p></li><li><p>linux下面有很多命令，一般没有办法直接处理文件夹，因此需要加上（参数 ）<br>递归，复制目录以及目录的子文件<code>cp -r</code><br>复制文件，同时保持文件的属性不变(stat)<code>cp -p</code><br>相当于( -pdr)<code>cp -a</code><br>递归复制test文件夹，为rest2<code>cp -r test test2</code></p></li><li><p>创建硬链接(一个文件多个路径，防止误删)<code>ln xx xx</code><br>创建软链接(符号链接)<code>ln -s xx xx</code></p></li><li><p>输入字符串<code>echo</code></p><ul><li>添加xx字符串到test.txt<code>echo &quot;xx&quot; &gt;&gt;test.txt</code></li></ul></li></ul><h5 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h5><ul><li>用于在终端下载网络文件<br>wget [参数] 下载地址</li></ul><h5 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h5><ul><li><pre><code>[d][rwx][r-x][r-x][d文件夹/l链接/-文件][属主权限][属组权限][其他用户权限](r读/147、w写/258、x执行/369)<pre class="line-numbers language-none"><code class="language-none">- test文件属主改为123&#96;chown -R 123 test&#96;- opt目录下的test文件夹给123管理&#96;sudo chown -R 123:123 &#x2F;opt&#x2F;test&#96;- test文件属组改为123&#96;chgrp -R 123 test&#96;- test最高权限(r:4,w:2,x:1)&#96;chmod -R 777 test&#96;##### 查找文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>find / -name xxx</code></pre></li></ul><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><ul><li>查看(tac)从下到上反着看<code>cat</code></li><li>显示行号<code>nl</code></li><li>翻页查看(空格翻页，enter往下翻一行，:f查看当前行号)<code>more</code></li><li>与more相反(q离开)(&#x2F;xx，向下查找字符串，?向上查询，n继续查找N与n方向相反)<code>less</code></li><li>查看文件前20行<code>head -n 20 xx.xx</code></li><li>与head相反<code>tail</code></li></ul><h3 id="重启关机"><a href="#重启关机" class="headerlink" title="重启关机"></a>重启关机</h3><p>关闭系统前同步内存到硬盘中<code>sync</code></p><ul><li><p>重启系统<code>reboot</code> <code>systemctl</code> <code>reboot</code></p></li><li><p>十分钟后重启<code>shutdown -r nowshutdown -r +10</code><br>#重启机器</p></li><li><p>关闭系统<code>poweroff</code> <code>systemctl poweroff</code> <code>halt</code></p></li><li><p>马上关机<code>shutdownshutdown -h now</code></p></li><li><p>十分钟后关机<code>shutdown -h 10</code> <code>shutdown -h +10</code></p></li><li><p>今天14点关机<code>shutdown -h 14:00</code></p></li></ul><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><ul><li>新建用户(自动创建123用户及主目录)<code>useradd -m 123</code></li><li>删除用户(删除用户账号以及主目录)<code>userdel -r 123</code></li><li>切换用户<code>su 123</code></li><li>修改密码<code>passwd 123</code></li><li>锁定账户<code>passwd -l 123</code></li></ul><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><ul><li>查看磁盘占用率<code>df -h</code></li><li>查看文件占用<code>du -ha</code></li><li>检查根目录下每个文件占用的容量<code>du -hsm /*</code></li><li>查看指定目录文件占用<code>du -hs /usr/src/</code></li><li>挂载磁盘(将外部设备123挂载到mut目录下<code>mount /dev/123 /mnt/123</code></li><li>强制卸载<code>umount -f /mnt/123</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建</title>
      <link href="/2022/05/01/docker/"/>
      <url>/2022/05/01/docker/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">sudo yum install -y yum-utils device-mapper-persistent-date lvm2sudo yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><span id="more"></span> <p>#安装环境</p><pre class="line-numbers language-none"><code class="language-none">sudo yum install -y docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#安装docker</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl start docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#安装docker compose</p><pre class="line-numbers language-none"><code class="language-none">curl -L https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.5.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composechmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.5.1&#x2F;docker-compose-Linux-x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#启动</p><pre class="line-numbers language-none"><code class="language-none">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#查看结果</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#开机自启</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json&#123;&quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#加⼊加速镜像源地址</p><pre class="line-numbers language-none"><code class="language-none">systemctl daemon-reloadsystemctl restart docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>#重新加载配置⽂件，重启 docker 服务</p><pre class="line-numbers language-none"><code class="language-none">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#查看本地镜像库</p><pre class="line-numbers language-none"><code class="language-none">docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者加-a查看全部<br>#查看活动实例</p><pre class="line-numbers language-none"><code class="language-none">docker run xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#运行xxx镜像</p><pre class="line-numbers language-none"><code class="language-none">docker rm xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#删除实例</p><pre class="line-numbers language-none"><code class="language-none">docker rmi xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#删除镜像</p><pre class="line-numbers language-none"><code class="language-none">sudo curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;Latest&#x2F;docker-compose-linux-x86_64-$(uname -s)-$(uname -m) -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#下载dockercompose并添加执行权限</p><pre class="line-numbers language-none"><code class="language-none">docker-compose -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#查看结果</p><p>docker run docker&#x2F;whalesay cowsay boo</p><p>网不好，明天继续</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql触发器</title>
      <link href="/2022/03/19/mysql%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
      <url>/2022/03/19/mysql%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="h1-">mysql触发器</h1><hr><pre class="line-numbers language-none"><code class="language-none">create trigger 名字 时间(after|before) 动作(insert|update|delete) on test1for each rowbeginsql语句 test2;end &#x2F;&#x2F;delimiter;delimiter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">create table test1 (id int,name varchar(10));create table test2 ( id int,rhce int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">create table test1 (id int,name varchar(10));create table test2 ( id int,rhce int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">insert into test1 values (1,&#39;tom1&#39;),(2,&#39;tom2&#39;),(3,&#39;tom3&#39;);insert into test2 values (1,&#39;100&#39;),(2,&#39;200&#39;),(3,&#39;300&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">delimiter &#x2F;&#x2F;create trigger lenovo after update on test1for each rowbeginupdate test2 set rhce&#x3D;400 where id&#x3D;1;end &#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">update test1 set name&#x3D;&#39;tom11&#39; where id&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">drop trigger if exists lenovo;delimiter &#x2F;&#x2F;create trigger lenovo after update on test1for each rowbeginupdate test2 set rhce&#x3D;400 where id&#x3D;old.id;end &#x2F;&#x2F;delimiter;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">update test1 set name&#x3D;&#39;tom11&#39; where id&#x3D;2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;hr&gt;drop table test1,test2;create table test1 (id int,rhce int);create table test2 ( id int,res enum(&#39;pass&#39;,&#39;fail&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">insert into test1 values (1,&#39;200&#39;),(2,&#39;210&#39;),(3,&#39;300&#39;);insert into test2 values (1,&#39;fail&#39;),(2,&#39;pass&#39;),(3,&#39;pass&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">drop trigger if exists lenovo;delimiter &#x2F;&#x2F;create trigger lenovo after update on test1for each rowbeginif new.rhce &gt;&#x3D;60 thenupdate test2 set res&#x3D;&#39;pass&#39; where id&#x3D;new.id;elseif new.rhce &lt; 60 thenupdate test2 set res&#x3D;&#39;fail&#39; where id&#x3D;old.id;end if;end &#x2F;&#x2F;delimiter;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">update test1 set rhce&#x3D;240 where id&#x3D;1;update test1 set rhce&#x3D;10 where id&#x3D;3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
